var searchIndex = {};
searchIndex["scad_generator"] = {"doc":"This crate is used to generate openscad models using rust.","items":[[3,"LinExtrudeParams","scad_generator","Parameters for the linear extrude function.",null,null],[12,"height","","",0,null],[12,"center","","",0,null],[12,"convexity","","",0,null],[12,"twist","","",0,null],[12,"slices","","",0,null],[3,"ScadObject","","An scad object which is a single scad element and can have zero or more child objects",null,null],[3,"ScadFile","","Object that stores scad objects along with global parameters for\nthe objects. Also has methods for writing the  data to files.",null,null],[4,"CircleType","","Since scad allows creation of circle like objects using either radius or diameter,\nthis enum specifies which format to use",null,null],[13,"Radius","","",1,null],[13,"Diameter","","",1,null],[4,"ScadElement","","Different kinds of scad modules and function. These are parameters\nfor `ScadObjects`.",null,null],[13,"Translate","","",2,null],[13,"Scale","","",2,null],[13,"Rotate","","",2,null],[13,"Mirror","","",2,null],[13,"LinearExtrude","","",2,null],[13,"Difference","","",2,null],[13,"Union","","",2,null],[13,"Hull","","",2,null],[13,"Intersection","","",2,null],[13,"Cube","","",2,null],[13,"Cylinder","","",2,null],[13,"Sphere","","",2,null],[13,"Cone","","",2,null],[13,"Polyhedron","","",2,null],[13,"Polygon","","",2,null],[13,"Import","","",2,null],[13,"Square","","",2,null],[11,"clone","","",1,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"linextrudeparams"}}],[11,"get_code","","",0,null],[11,"clone","","",2,null],[11,"get_code","","Returns scad code for each of the elements",2,null],[11,"clone","","",3,null],[11,"new","","",3,{"inputs":[{"name":"scadelement"}],"output":{"name":"scadobject"}}],[11,"add_child","","",3,null],[11,"get_code","","Returns the scad code for the object.",3,null],[11,"is_important","","Marks the object as important. This will prepend the object code\nwith an ! which tells scad to only render that object and its children.",3,null],[11,"new","","",4,{"inputs":[],"output":{"name":"scadfile"}}],[11,"get_code","","Returns the code for the global parameters as well as all the\nchildren in the file",4,null],[11,"add_object","","",4,null],[11,"set_detail","","Sets the $fn variable for the whole file. This varibale defines  the detail\namount for cylindrical objects",4,null],[11,"write_to_file","","Writes the resulting code to a file",4,null],[0,"scad_macros","","",null,null],[5,"vec3","scad_generator::scad_macros","Utility function for creating nalgebra vectors without having\nto write `na::Vector3::new(x,y,z)`",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vector3"}}],[5,"vec2","","Utility function for creating nalgebra vectors without having\nto write `na::Vector2::new(x,y)`",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"vector2"}}],[8,"ScadType","scad_generator","Trait for converting from rust types to strings compatible with openscad",null,null],[10,"get_code","","",5,null],[14,"scad","","Creates an scad object with optional children",null,null],[14,"qstruct","","Used to create structs with ::new functions that set default values\nwithout having to write an impl for new. ",null,null]],"paths":[[3,"LinExtrudeParams"],[4,"CircleType"],[4,"ScadElement"],[3,"ScadObject"],[3,"ScadFile"],[8,"ScadType"]]};
searchIndex["nalgebra"] = {"doc":"# nalgebra","items":[[3,"Identity","nalgebra","Special identity matrix. All its operation are no-ops.",null,null],[3,"DMatrix","","Matrix with dimensions unknown at compile-time.",null,null],[3,"DMatrix1","","A stack-allocated dynamically sized matrix with at most one row and column.",null,null],[3,"DMatrix2","","A stack-allocated dynamically sized square or rectangular matrix with at most 2 rows and columns.",null,null],[3,"DMatrix3","","A stack-allocated dynamically sized square or rectangular matrix with at most 3 rows and columns.",null,null],[3,"DMatrix4","","A stack-allocated dynamically sized square or rectangular matrix with at most 4 rows and columns.",null,null],[3,"DMatrix5","","A stack-allocated dynamically sized square or rectangular matrix with at most 5 rows and columns.",null,null],[3,"DMatrix6","","A stack-allocated dynamically sized square or rectangular matrix with at most 6 rows and columns.",null,null],[3,"DVector","","Heap allocated, dynamically sized vector.",null,null],[12,"at","","Components of the vector. Contains as much elements as the vector dimension.",0,null],[3,"DVector1","","Stack-allocated, dynamically sized vector with a maximum size of 1.",null,null],[3,"DVector2","","Stack-allocated, dynamically sized vector with a maximum size of 2.",null,null],[3,"DVector3","","Stack-allocated, dynamically sized vector with a maximum size of 3.",null,null],[3,"DVector4","","Stack-allocated, dynamically sized vector with a maximum size of 4.",null,null],[3,"DVector5","","Stack-allocated, dynamically sized vector with a maximum size of 5.",null,null],[3,"DVector6","","Stack-allocated, dynamically sized vector with a maximum size of 6.",null,null],[3,"Isometry2","","Two dimensional **direct** isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",1,null],[12,"translation","","The translation applicable by this isometry.",1,null],[3,"Isometry3","","Three dimensional **direct** isometry.",null,null],[12,"rotation","","The rotation applicable by this isometry.",2,null],[12,"translation","","The translation applicable by this isometry.",2,null],[3,"Similarity2","","A two-dimensional similarity transformation.",null,null],[12,"isometry","","The isometry applicable by this similarity transformation.",3,null],[3,"Similarity3","","A three-dimensional similarity transformation.",null,null],[12,"isometry","","The isometry applicable by this similarity transformation.",4,null],[3,"Matrix1","","Square matrix of dimension 1.",null,null],[12,"m11","","",5,null],[3,"Matrix2","","Square matrix of dimension 2.",null,null],[12,"m11","","",6,null],[12,"m21","","",6,null],[12,"m12","","",6,null],[12,"m22","","",6,null],[3,"Matrix3","","Square matrix of dimension 3.",null,null],[12,"m11","","",7,null],[12,"m21","","",7,null],[12,"m31","","",7,null],[12,"m12","","",7,null],[12,"m22","","",7,null],[12,"m32","","",7,null],[12,"m13","","",7,null],[12,"m23","","",7,null],[12,"m33","","",7,null],[3,"Matrix4","","Square matrix of dimension 4.",null,null],[12,"m11","","",8,null],[12,"m21","","",8,null],[12,"m31","","",8,null],[12,"m41","","",8,null],[12,"m12","","",8,null],[12,"m22","","",8,null],[12,"m32","","",8,null],[12,"m42","","",8,null],[12,"m13","","",8,null],[12,"m23","","",8,null],[12,"m33","","",8,null],[12,"m43","","",8,null],[12,"m14","","",8,null],[12,"m24","","",8,null],[12,"m34","","",8,null],[12,"m44","","",8,null],[3,"Matrix5","","Square matrix of dimension 5.",null,null],[12,"m11","","",9,null],[12,"m21","","",9,null],[12,"m31","","",9,null],[12,"m41","","",9,null],[12,"m51","","",9,null],[12,"m12","","",9,null],[12,"m22","","",9,null],[12,"m32","","",9,null],[12,"m42","","",9,null],[12,"m52","","",9,null],[12,"m13","","",9,null],[12,"m23","","",9,null],[12,"m33","","",9,null],[12,"m43","","",9,null],[12,"m53","","",9,null],[12,"m14","","",9,null],[12,"m24","","",9,null],[12,"m34","","",9,null],[12,"m44","","",9,null],[12,"m54","","",9,null],[12,"m15","","",9,null],[12,"m25","","",9,null],[12,"m35","","",9,null],[12,"m45","","",9,null],[12,"m55","","",9,null],[3,"Matrix6","","Square matrix of dimension 6.",null,null],[12,"m11","","",10,null],[12,"m21","","",10,null],[12,"m31","","",10,null],[12,"m41","","",10,null],[12,"m51","","",10,null],[12,"m61","","",10,null],[12,"m12","","",10,null],[12,"m22","","",10,null],[12,"m32","","",10,null],[12,"m42","","",10,null],[12,"m52","","",10,null],[12,"m62","","",10,null],[12,"m13","","",10,null],[12,"m23","","",10,null],[12,"m33","","",10,null],[12,"m43","","",10,null],[12,"m53","","",10,null],[12,"m63","","",10,null],[12,"m14","","",10,null],[12,"m24","","",10,null],[12,"m34","","",10,null],[12,"m44","","",10,null],[12,"m54","","",10,null],[12,"m64","","",10,null],[12,"m15","","",10,null],[12,"m25","","",10,null],[12,"m35","","",10,null],[12,"m45","","",10,null],[12,"m55","","",10,null],[12,"m65","","",10,null],[12,"m16","","",10,null],[12,"m26","","",10,null],[12,"m36","","",10,null],[12,"m46","","",10,null],[12,"m56","","",10,null],[12,"m66","","",10,null],[3,"Rotation2","","Two dimensional rotation matrix.",null,null],[3,"Rotation3","","Three dimensional rotation matrix.",null,null],[3,"Vector1","","Vector of dimension 1.",null,null],[12,"x","","First component of the vector.",11,null],[3,"Vector2","","Vector of dimension 2.",null,null],[12,"x","","First component of the vector.",12,null],[12,"y","","Second component of the vector.",12,null],[3,"Vector3","","Vector of dimension 3.",null,null],[12,"x","","First component of the vector.",13,null],[12,"y","","Second component of the vector.",13,null],[12,"z","","Third component of the vector.",13,null],[3,"Vector4","","Vector of dimension 4.",null,null],[12,"x","","First component of the vector.",14,null],[12,"y","","Second component of the vector.",14,null],[12,"z","","Third component of the vector.",14,null],[12,"w","","Fourth component of the vector.",14,null],[3,"Vector5","","Vector of dimension 5.",null,null],[12,"x","","First component of the vector.",15,null],[12,"y","","Second component of the vector.",15,null],[12,"z","","Third component of the vector.",15,null],[12,"w","","Fourth component of the vector.",15,null],[12,"a","","Fifth of the vector.",15,null],[3,"Vector6","","Vector of dimension 6.",null,null],[12,"x","","First component of the vector.",16,null],[12,"y","","Second component of the vector.",16,null],[12,"z","","Third component of the vector.",16,null],[12,"w","","Fourth component of the vector.",16,null],[12,"a","","Fifth of the vector.",16,null],[12,"b","","Sixth component of the vector.",16,null],[3,"Point1","","Point of dimension 1.",null,null],[12,"x","","First component of the point.",17,null],[3,"Point2","","Point of dimension 2.",null,null],[12,"x","","First component of the point.",18,null],[12,"y","","Second component of the point.",18,null],[3,"Point3","","Point of dimension 3.",null,null],[12,"x","","First component of the point.",19,null],[12,"y","","Second component of the point.",19,null],[12,"z","","Third component of the point.",19,null],[3,"Point4","","Point of dimension 4.",null,null],[12,"x","","First component of the point.",20,null],[12,"y","","Second component of the point.",20,null],[12,"z","","Third component of the point.",20,null],[12,"w","","Fourth component of the point.",20,null],[3,"Point5","","Point of dimension 5.",null,null],[12,"x","","First component of the point.",21,null],[12,"y","","Second component of the point.",21,null],[12,"z","","Third component of the point.",21,null],[12,"w","","Fourth component of the point.",21,null],[12,"a","","Fifth of the point.",21,null],[3,"Point6","","Point of dimension 6.",null,null],[12,"x","","First component of the point.",22,null],[12,"y","","Second component of the point.",22,null],[12,"z","","Third component of the point.",22,null],[12,"w","","Fourth component of the point.",22,null],[12,"a","","Fifth of the point.",22,null],[12,"b","","Sixth component of the point.",22,null],[3,"Perspective3","","A 3D perspective projection stored without any matrix.",null,null],[3,"PerspectiveMatrix3","","A 3D perspective projection stored as a 4D matrix.",null,null],[3,"Orthographic3","","A 3D orthographic projection stored without any matrix.",null,null],[3,"OrthographicMatrix3","","A 3D orthographic projection stored as a 4D matrix.",null,null],[3,"Quaternion","","A quaternion. See `UnitQuaternion` for a quaternion that can be used as a rotation.",null,null],[12,"w","","The scalar component of the quaternion.",23,null],[12,"i","","The first vector component of the quaternion.",23,null],[12,"j","","The second vector component of the quaternion.",23,null],[12,"k","","The third vector component of the quaternion.",23,null],[3,"UnitQuaternion","","A unit quaternion that can represent a 3D rotation.",null,null],[4,"PartialOrdering","","Result of a partial ordering.",null,null],[13,"PartialLess","","Result of a strict comparison.",24,null],[13,"PartialEqual","","Equality relationship.",24,null],[13,"PartialGreater","","Result of a strict comparison.",24,null],[13,"NotComparable","","Result of a comparison between two objects that are not comparable.",24,null],[5,"qr","","QR decomposition using Householder reflections.",null,null],[5,"householder_matrix","","Get the householder matrix corresponding to a reflexion to the hyperplane\ndefined by `vector`. It can be a reflexion contained in a subspace.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"}],"output":{"name":"m"}}],[5,"cholesky","","Cholesky decomposition G of a square symmetric positive definite matrix A, such that A = G * G^T",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"hessenberg","","Hessenberg\nReturns the matrix m in Hessenberg form and the corresponding similarity transformation",null,null],[5,"clamp","","Change the input value to ensure it is on the range `[min, max]`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Same as `cmp::max`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Same as `cmp::min`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"inf","","Returns the infimum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"sup","","Returns the supremum of `a` and `b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"partial_cmp","","Compare `a` and `b` using a partial ordering relation.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"partialordering"}}],[5,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a &lt; b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a &lt;= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a &gt; b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a &gt;= b`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"partial_min","","Return the minimum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_max","","Return the maximum of `a` and `b` if they are comparable.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"option"}}],[5,"identity","","Create a special identity object.",null,{"inputs":[],"output":{"name":"identity"}}],[5,"zero","","Create a zero-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"is_zero","","Tests is a value is iqual to zero.",null,{"inputs":[{"name":"t"}],"output":{"name":"bool"}}],[5,"one","","Create a one-valued value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"origin","","Returns the trivial origin of an affine space.",null,{"inputs":[],"output":{"name":"p"}}],[5,"center","","Returns the center of two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[5,"distance","","Returns the distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"distance_squared","","Returns the squared distance between two points.",null,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"n"}}],[5,"translation","","Gets the translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inverse_translation","","Gets the inverse translation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_translation","","Applies the translation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"translate","","Applies a translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"inverse_translate","","Applies an inverse translation to a point.",null,{"inputs":[{"name":"m"},{"name":"p"}],"output":{"name":"p"}}],[5,"rotation","","Gets the rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"inverse_rotation","","Gets the inverse rotation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"append_rotation","","Applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"prepend_rotation","","Pre-applies the rotation `v` to a copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"m"}}],[5,"rotate","","Applies a rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inverse_rotate","","Applies an inverse rotation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"append_rotation_wrt_point","","Rotates a copy of `m` by `amount` using `center` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"},{"name":"lv"}],"output":{"name":"m"}}],[5,"append_rotation_wrt_center","","Rotates a copy of `m` by `amount` using `m.translation()` as the pivot point.",null,{"inputs":[{"name":"m"},{"name":"av"}],"output":{"name":"m"}}],[5,"angle_between","","Computes the angle of the rotation needed to transfom `a` to `b`.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"angletype"}}],[5,"rotation_between","","Computes the rotation needed to transform `a` to `b`.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"deltarotationtype"}}],[5,"to_rotation_matrix","","Builds a rotation matrix from `r`.",null,{"inputs":[{"name":"r"}],"output":{"name":"m"}}],[5,"absolute_rotate","","Applies a rotation using the absolute values of its components.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"transformation","","Gets the transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"inverse_transformation","","Gets the inverse transformation applicable by `m`.",null,{"inputs":[{"name":"m"}],"output":{"name":"t"}}],[5,"append_transformation","","Gets a transformed copy of `m`.",null,{"inputs":[{"name":"m"},{"name":"t"}],"output":{"name":"m"}}],[5,"transform","","Applies a transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"inverse_transform","","Applies an inverse transformation to a vector.",null,{"inputs":[{"name":"m"},{"name":"v"}],"output":{"name":"v"}}],[5,"dot","","Computes the dot product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"n"}}],[5,"norm","","Computes the L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"n"}}],[5,"norm_squared","","Computes the squared L2 norm of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"n"}}],[5,"normalize","","Gets the normalized version of a vector.",null,{"inputs":[{"name":"v"}],"output":{"name":"v"}}],[5,"determinant","","Computes the determinant of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"cross","","Computes the cross product of two vectors.",null,{"inputs":[{"name":"lv"},{"name":"lv"}],"output":{"name":"crossproducttype"}}],[5,"cross_matrix","","Given a vector, computes the matrix which, when multiplied by another vector, computes a cross\nproduct.",null,{"inputs":[{"name":"v"}],"output":{"name":"m"}}],[5,"to_homogeneous","","Converts a matrix or vector to homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"from_homogeneous","","Converts a matrix or vector from homogeneous coordinates.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"sample_sphere","","Samples the unit sphere living on the dimension as the samples types.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"approx_eq","","Tests approximate equality.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"n"}],"output":{"name":"bool"}}],[5,"abs","","Computes a component-wise absolute value.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"inverse","","Gets an inverted copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"option"}}],[5,"transpose","","Gets a transposed copy of a matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"m"}}],[5,"outer","","Computes the outer product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"outerproducttype"}}],[5,"covariance","","Computes the covariance of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"res"}}],[5,"mean","","Computes the mean of a set of observations.",null,{"inputs":[{"name":"m"}],"output":{"name":"n"}}],[5,"eigen_qr","","Computes the eigenvalues and eigenvectors of a square matrix usin the QR algorithm.",null,null],[5,"new_identity","","Construct the identity matrix for a given dimension",null,{"inputs":[{"name":"usize"}],"output":{"name":"m"}}],[5,"repeat","","Create an object by repeating a value.",null,{"inputs":[{"name":"n"}],"output":{"name":"t"}}],[5,"canonical_basis","","Computes the canonical basis for a given dimension.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"orthonormal_subspace_basis","","Computes the basis of the orthonormal subspace of a given vector.",null,{"inputs":[{"name":"v"},{"name":"f"}],"output":null}],[5,"canonical_basis_element","","Gets the (0-based) i-th element of the canonical basis of V.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[5,"diagonal","","Gets the diagonal of a square matrix.",null,{"inputs":[{"name":"m"}],"output":{"name":"v"}}],[5,"dimension","","Gets the dimension an object lives in.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"shape","","Gets the indexable range of an object.",null,{"inputs":[{"name":"v"}],"output":{"name":"i"}}],[5,"cast","","Converts an object from one type to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"clone","","",25,null],[11,"new_uninitialized","","Creates an uninitialized matrix.",25,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"from_element","","Builds a matrix filled with a given constant.",25,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is much faster than `from_row_vector` since a `DMatrix` stores its data\nin column-major order.",25,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is much faster than `from_row_vector` since a `DMatrix` stores its data\nin column-major order.",25,null],[11,"from_row_iter","","Builds a matrix filled with the components provided by a source that may be moved into an iterator.\nThe source contains the matrix data in row-major order.\nNote that `from_column_iter` is much faster than `from_row_iter` since a `DMatrix` stores its data\nin column-major order.",25,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"dmatrix"}}],[11,"from_column_iter","","Builds a matrix filled with the components provided by a source that may be moved into an iterator.\nThe source contains the matrix data in column-major order.\nNote that `from_column_iter` is much faster than `from_row_iter` since a `DMatrix` stores its data\nin column-major order.",25,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"i"}],"output":{"name":"dmatrix"}}],[11,"from_fn","","Builds a matrix filled with the results of a function applied to each of its component coordinates.",25,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix"}}],[11,"into_vector","","Transforms this matrix into an array. This consumes the matrix and is O(1).\nThe returned vector contains the matrix data in column-major order.",25,null],[11,"new_zeros","","Builds a matrix filled with zeros.",25,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",25,null],[11,"reset","","Set this matrix components to zero.",25,null],[11,"new_random","","Builds a matrix filled with random values.",25,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",25,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"nrows","","The number of row on the matrix.",25,null],[11,"ncols","","The number of columns on the matrix.",25,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",25,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",25,null],[11,"new_identity","","Builds an identity matrix.",25,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",25,null],[11,"unsafe_at","","Just like `at` without bounds checking.",25,null],[11,"swap","","",25,null],[11,"shape","","",25,null],[11,"index","","",25,null],[11,"index_mut","","",25,null],[11,"mul","","",25,null],[11,"mul","","",25,null],[11,"mul_assign","","",25,null],[11,"mul_assign","","",25,null],[11,"mul","","",25,null],[11,"mul","","",25,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"add","","",25,null],[11,"add","","",25,null],[11,"add_assign","","",25,null],[11,"add_assign","","",25,null],[11,"sub","","",25,null],[11,"sub_assign","","",25,null],[11,"sub","","",25,null],[11,"sub","","",25,null],[11,"sub_assign","","",25,null],[11,"sub_assign","","",25,null],[11,"inverse","","",25,null],[11,"inverse_mut","","",25,null],[11,"transpose","","",25,null],[11,"transpose_mut","","",25,null],[11,"mean","","",25,null],[11,"covariance","","",25,null],[11,"ncols","","",25,null],[11,"set_column","","",25,null],[11,"column","","",25,null],[11,"column_slice","","",25,null],[11,"nrows","","",25,null],[11,"set_row","","",25,null],[11,"row","","",25,null],[11,"row_slice","","",25,null],[11,"from_diagonal","","",25,{"inputs":[{"name":"dvector"}],"output":{"name":"dmatrix"}}],[11,"diagonal","","",25,null],[11,"approx_epsilon","","",25,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",25,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",25,null],[11,"approx_eq_ulps","","",25,null],[11,"fmt","","",25,null],[11,"mul","","",25,null],[11,"div","","",25,null],[11,"add","","",25,null],[11,"eq","","",26,null],[11,"clone","","",26,null],[11,"new_zeros","","Builds a matrix filled with zeros.",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",26,null],[11,"reset","","Set this matrix components to zero.",26,null],[11,"new_random","","Builds a matrix filled with random values.",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"nrows","","The number of row on the matrix.",26,null],[11,"ncols","","The number of columns on the matrix.",26,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",26,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",26,null],[11,"new_identity","","Builds an identity matrix.",26,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",26,null],[11,"unsafe_at","","Just like `at` without bounds checking.",26,null],[11,"swap","","",26,null],[11,"shape","","",26,null],[11,"index","","",26,null],[11,"index_mut","","",26,null],[11,"mul","","",26,null],[11,"mul","","",26,null],[11,"mul_assign","","",26,null],[11,"mul_assign","","",26,null],[11,"mul","","",26,null],[11,"mul","","",26,null],[11,"mul","","",27,null],[11,"mul","","",27,null],[11,"mul_assign","","",27,null],[11,"mul_assign","","",27,null],[11,"add","","",26,null],[11,"add","","",26,null],[11,"add_assign","","",26,null],[11,"add_assign","","",26,null],[11,"sub","","",26,null],[11,"sub_assign","","",26,null],[11,"sub","","",26,null],[11,"sub","","",26,null],[11,"sub_assign","","",26,null],[11,"sub_assign","","",26,null],[11,"inverse","","",26,null],[11,"inverse_mut","","",26,null],[11,"transpose","","",26,null],[11,"transpose_mut","","",26,null],[11,"mean","","",26,null],[11,"covariance","","",26,null],[11,"ncols","","",26,null],[11,"set_column","","",26,null],[11,"column","","",26,null],[11,"column_slice","","",26,null],[11,"nrows","","",26,null],[11,"set_row","","",26,null],[11,"row","","",26,null],[11,"row_slice","","",26,null],[11,"from_diagonal","","",26,{"inputs":[{"name":"dvector1"}],"output":{"name":"dmatrix1"}}],[11,"diagonal","","",26,null],[11,"approx_epsilon","","",26,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",26,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",26,null],[11,"approx_eq_ulps","","",26,null],[11,"fmt","","",26,null],[11,"mul","","",26,null],[11,"div","","",26,null],[11,"add","","",26,null],[11,"from_element","","Builds a matrix filled with a given constant.",26,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix1"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",26,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",26,null],[11,"from_fn","","Builds a matrix using an initialization function.",26,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix1"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",26,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix1"}}],[11,"eq","","",28,null],[11,"clone","","",28,null],[11,"new_zeros","","Builds a matrix filled with zeros.",28,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",28,null],[11,"reset","","Set this matrix components to zero.",28,null],[11,"new_random","","Builds a matrix filled with random values.",28,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",28,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"nrows","","The number of row on the matrix.",28,null],[11,"ncols","","The number of columns on the matrix.",28,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",28,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",28,null],[11,"new_identity","","Builds an identity matrix.",28,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",28,null],[11,"unsafe_at","","Just like `at` without bounds checking.",28,null],[11,"swap","","",28,null],[11,"shape","","",28,null],[11,"index","","",28,null],[11,"index_mut","","",28,null],[11,"mul","","",28,null],[11,"mul","","",28,null],[11,"mul_assign","","",28,null],[11,"mul_assign","","",28,null],[11,"mul","","",28,null],[11,"mul","","",28,null],[11,"mul","","",29,null],[11,"mul","","",29,null],[11,"mul_assign","","",29,null],[11,"mul_assign","","",29,null],[11,"add","","",28,null],[11,"add","","",28,null],[11,"add_assign","","",28,null],[11,"add_assign","","",28,null],[11,"sub","","",28,null],[11,"sub_assign","","",28,null],[11,"sub","","",28,null],[11,"sub","","",28,null],[11,"sub_assign","","",28,null],[11,"sub_assign","","",28,null],[11,"inverse","","",28,null],[11,"inverse_mut","","",28,null],[11,"transpose","","",28,null],[11,"transpose_mut","","",28,null],[11,"mean","","",28,null],[11,"covariance","","",28,null],[11,"ncols","","",28,null],[11,"set_column","","",28,null],[11,"column","","",28,null],[11,"column_slice","","",28,null],[11,"nrows","","",28,null],[11,"set_row","","",28,null],[11,"row","","",28,null],[11,"row_slice","","",28,null],[11,"from_diagonal","","",28,{"inputs":[{"name":"dvector2"}],"output":{"name":"dmatrix2"}}],[11,"diagonal","","",28,null],[11,"approx_epsilon","","",28,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",28,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",28,null],[11,"approx_eq_ulps","","",28,null],[11,"fmt","","",28,null],[11,"mul","","",28,null],[11,"div","","",28,null],[11,"add","","",28,null],[11,"from_element","","Builds a matrix filled with a given constant.",28,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix2"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",28,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",28,null],[11,"from_fn","","Builds a matrix using an initialization function.",28,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix2"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",28,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix2"}}],[11,"eq","","",30,null],[11,"clone","","",30,null],[11,"new_zeros","","Builds a matrix filled with zeros.",30,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",30,null],[11,"reset","","Set this matrix components to zero.",30,null],[11,"new_random","","Builds a matrix filled with random values.",30,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",30,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"nrows","","The number of row on the matrix.",30,null],[11,"ncols","","The number of columns on the matrix.",30,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",30,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",30,null],[11,"new_identity","","Builds an identity matrix.",30,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",30,null],[11,"unsafe_at","","Just like `at` without bounds checking.",30,null],[11,"swap","","",30,null],[11,"shape","","",30,null],[11,"index","","",30,null],[11,"index_mut","","",30,null],[11,"mul","","",30,null],[11,"mul","","",30,null],[11,"mul_assign","","",30,null],[11,"mul_assign","","",30,null],[11,"mul","","",30,null],[11,"mul","","",30,null],[11,"mul","","",31,null],[11,"mul","","",31,null],[11,"mul_assign","","",31,null],[11,"mul_assign","","",31,null],[11,"add","","",30,null],[11,"add","","",30,null],[11,"add_assign","","",30,null],[11,"add_assign","","",30,null],[11,"sub","","",30,null],[11,"sub_assign","","",30,null],[11,"sub","","",30,null],[11,"sub","","",30,null],[11,"sub_assign","","",30,null],[11,"sub_assign","","",30,null],[11,"inverse","","",30,null],[11,"inverse_mut","","",30,null],[11,"transpose","","",30,null],[11,"transpose_mut","","",30,null],[11,"mean","","",30,null],[11,"covariance","","",30,null],[11,"ncols","","",30,null],[11,"set_column","","",30,null],[11,"column","","",30,null],[11,"column_slice","","",30,null],[11,"nrows","","",30,null],[11,"set_row","","",30,null],[11,"row","","",30,null],[11,"row_slice","","",30,null],[11,"from_diagonal","","",30,{"inputs":[{"name":"dvector3"}],"output":{"name":"dmatrix3"}}],[11,"diagonal","","",30,null],[11,"approx_epsilon","","",30,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",30,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",30,null],[11,"approx_eq_ulps","","",30,null],[11,"fmt","","",30,null],[11,"mul","","",30,null],[11,"div","","",30,null],[11,"add","","",30,null],[11,"from_element","","Builds a matrix filled with a given constant.",30,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix3"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",30,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",30,null],[11,"from_fn","","Builds a matrix using an initialization function.",30,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix3"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",30,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix3"}}],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new_zeros","","Builds a matrix filled with zeros.",32,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",32,null],[11,"reset","","Set this matrix components to zero.",32,null],[11,"new_random","","Builds a matrix filled with random values.",32,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",32,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"nrows","","The number of row on the matrix.",32,null],[11,"ncols","","The number of columns on the matrix.",32,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",32,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",32,null],[11,"new_identity","","Builds an identity matrix.",32,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",32,null],[11,"unsafe_at","","Just like `at` without bounds checking.",32,null],[11,"swap","","",32,null],[11,"shape","","",32,null],[11,"index","","",32,null],[11,"index_mut","","",32,null],[11,"mul","","",32,null],[11,"mul","","",32,null],[11,"mul_assign","","",32,null],[11,"mul_assign","","",32,null],[11,"mul","","",32,null],[11,"mul","","",32,null],[11,"mul","","",33,null],[11,"mul","","",33,null],[11,"mul_assign","","",33,null],[11,"mul_assign","","",33,null],[11,"add","","",32,null],[11,"add","","",32,null],[11,"add_assign","","",32,null],[11,"add_assign","","",32,null],[11,"sub","","",32,null],[11,"sub_assign","","",32,null],[11,"sub","","",32,null],[11,"sub","","",32,null],[11,"sub_assign","","",32,null],[11,"sub_assign","","",32,null],[11,"inverse","","",32,null],[11,"inverse_mut","","",32,null],[11,"transpose","","",32,null],[11,"transpose_mut","","",32,null],[11,"mean","","",32,null],[11,"covariance","","",32,null],[11,"ncols","","",32,null],[11,"set_column","","",32,null],[11,"column","","",32,null],[11,"column_slice","","",32,null],[11,"nrows","","",32,null],[11,"set_row","","",32,null],[11,"row","","",32,null],[11,"row_slice","","",32,null],[11,"from_diagonal","","",32,{"inputs":[{"name":"dvector4"}],"output":{"name":"dmatrix4"}}],[11,"diagonal","","",32,null],[11,"approx_epsilon","","",32,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",32,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",32,null],[11,"approx_eq_ulps","","",32,null],[11,"fmt","","",32,null],[11,"mul","","",32,null],[11,"div","","",32,null],[11,"add","","",32,null],[11,"from_element","","Builds a matrix filled with a given constant.",32,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix4"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",32,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",32,null],[11,"from_fn","","Builds a matrix using an initialization function.",32,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix4"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",32,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix4"}}],[11,"eq","","",34,null],[11,"clone","","",34,null],[11,"new_zeros","","Builds a matrix filled with zeros.",34,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",34,null],[11,"reset","","Set this matrix components to zero.",34,null],[11,"new_random","","Builds a matrix filled with random values.",34,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",34,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"nrows","","The number of row on the matrix.",34,null],[11,"ncols","","The number of columns on the matrix.",34,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",34,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",34,null],[11,"new_identity","","Builds an identity matrix.",34,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",34,null],[11,"unsafe_at","","Just like `at` without bounds checking.",34,null],[11,"swap","","",34,null],[11,"shape","","",34,null],[11,"index","","",34,null],[11,"index_mut","","",34,null],[11,"mul","","",34,null],[11,"mul","","",34,null],[11,"mul_assign","","",34,null],[11,"mul_assign","","",34,null],[11,"mul","","",34,null],[11,"mul","","",34,null],[11,"mul","","",35,null],[11,"mul","","",35,null],[11,"mul_assign","","",35,null],[11,"mul_assign","","",35,null],[11,"add","","",34,null],[11,"add","","",34,null],[11,"add_assign","","",34,null],[11,"add_assign","","",34,null],[11,"sub","","",34,null],[11,"sub_assign","","",34,null],[11,"sub","","",34,null],[11,"sub","","",34,null],[11,"sub_assign","","",34,null],[11,"sub_assign","","",34,null],[11,"inverse","","",34,null],[11,"inverse_mut","","",34,null],[11,"transpose","","",34,null],[11,"transpose_mut","","",34,null],[11,"mean","","",34,null],[11,"covariance","","",34,null],[11,"ncols","","",34,null],[11,"set_column","","",34,null],[11,"column","","",34,null],[11,"column_slice","","",34,null],[11,"nrows","","",34,null],[11,"set_row","","",34,null],[11,"row","","",34,null],[11,"row_slice","","",34,null],[11,"from_diagonal","","",34,{"inputs":[{"name":"dvector5"}],"output":{"name":"dmatrix5"}}],[11,"diagonal","","",34,null],[11,"approx_epsilon","","",34,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",34,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",34,null],[11,"approx_eq_ulps","","",34,null],[11,"fmt","","",34,null],[11,"mul","","",34,null],[11,"div","","",34,null],[11,"add","","",34,null],[11,"from_element","","Builds a matrix filled with a given constant.",34,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix5"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",34,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",34,null],[11,"from_fn","","Builds a matrix using an initialization function.",34,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix5"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",34,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix5"}}],[11,"eq","","",36,null],[11,"clone","","",36,null],[11,"new_zeros","","Builds a matrix filled with zeros.",36,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"is_zero","","Tests if all components of the matrix are zeroes.",36,null],[11,"reset","","Set this matrix components to zero.",36,null],[11,"new_random","","Builds a matrix filled with random values.",36,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"new_ones","","Builds a matrix filled with a given constant.",36,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"nrows","","The number of row on the matrix.",36,null],[11,"ncols","","The number of columns on the matrix.",36,null],[11,"as_vector","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",36,null],[11,"as_mut_vector","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",36,null],[11,"new_identity","","Builds an identity matrix.",36,{"inputs":[{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"unsafe_set","","Just like `set` without bounds checking.",36,null],[11,"unsafe_at","","Just like `at` without bounds checking.",36,null],[11,"swap","","",36,null],[11,"shape","","",36,null],[11,"index","","",36,null],[11,"index_mut","","",36,null],[11,"mul","","",36,null],[11,"mul","","",36,null],[11,"mul_assign","","",36,null],[11,"mul_assign","","",36,null],[11,"mul","","",36,null],[11,"mul","","",36,null],[11,"mul","","",37,null],[11,"mul","","",37,null],[11,"mul_assign","","",37,null],[11,"mul_assign","","",37,null],[11,"add","","",36,null],[11,"add","","",36,null],[11,"add_assign","","",36,null],[11,"add_assign","","",36,null],[11,"sub","","",36,null],[11,"sub_assign","","",36,null],[11,"sub","","",36,null],[11,"sub","","",36,null],[11,"sub_assign","","",36,null],[11,"sub_assign","","",36,null],[11,"inverse","","",36,null],[11,"inverse_mut","","",36,null],[11,"transpose","","",36,null],[11,"transpose_mut","","",36,null],[11,"mean","","",36,null],[11,"covariance","","",36,null],[11,"ncols","","",36,null],[11,"set_column","","",36,null],[11,"column","","",36,null],[11,"column_slice","","",36,null],[11,"nrows","","",36,null],[11,"set_row","","",36,null],[11,"row","","",36,null],[11,"row_slice","","",36,null],[11,"from_diagonal","","",36,{"inputs":[{"name":"dvector6"}],"output":{"name":"dmatrix6"}}],[11,"diagonal","","",36,null],[11,"approx_epsilon","","",36,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",36,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",36,null],[11,"approx_eq_ulps","","",36,null],[11,"fmt","","",36,null],[11,"mul","","",36,null],[11,"div","","",36,null],[11,"add","","",36,null],[11,"from_element","","Builds a matrix filled with a given constant.",36,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"n"}],"output":{"name":"dmatrix6"}}],[11,"from_row_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",36,null],[11,"from_column_vector","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_column_vector` is a lot faster than `from_row_vector` since a `$dmatrix` stores its data\nin column-major order.",36,null],[11,"from_fn","","Builds a matrix using an initialization function.",36,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"dmatrix6"}}],[11,"new_uninitialized","","Creates a new matrix with uninitialized components (with `mem::uninitialized()`).",36,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"dmatrix6"}}],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"new_uninitialized","","Creates an uninitialized vector.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvector"}}],[11,"from_element","","Builds a vector filled with a constant.",0,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",0,null],[11,"from_fn","","Builds a vector filled with the results of a function applied to each of its component coordinates.",0,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector"}}],[11,"len","","The vector length.",0,null],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"dvector"}}],[11,"outer","","",0,null],[11,"is_zero","","Tests if all components of the vector are zeroes.",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"shape","","",0,null],[11,"swap","","",0,null],[11,"unsafe_at","","",0,null],[11,"unsafe_set","","",0,null],[11,"index","","",0,null],[11,"index_mut","","",0,null],[11,"iter","","",0,null],[11,"iter_mut","","",0,null],[11,"axpy","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"neg","","",0,null],[11,"dot","","",0,null],[11,"norm_squared","","",0,null],[11,"normalize","","",0,null],[11,"normalize_mut","","",0,null],[11,"mean","","",0,null],[11,"approx_epsilon","","",0,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",0,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",0,null],[11,"approx_eq_ulps","","",0,null],[11,"new_zeros","","Builds a vector filled with zeros.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvector"}}],[11,"new_ones","","Builds a vector filled with ones.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvector"}}],[11,"new_random","","Builds a vector filled with random values.",0,{"inputs":[{"name":"usize"}],"output":{"name":"dvector"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",0,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",0,null],[11,"is_zero","","Tests if all components of the vector are zeroes.",27,null],[11,"as_ref","","",27,null],[11,"as_mut","","",27,null],[11,"shape","","",27,null],[11,"swap","","",27,null],[11,"unsafe_at","","",27,null],[11,"unsafe_set","","",27,null],[11,"index","","",27,null],[11,"index_mut","","",27,null],[11,"iter","","",27,null],[11,"iter_mut","","",27,null],[11,"axpy","","",27,null],[11,"mul","","",27,null],[11,"mul","","",27,null],[11,"mul_assign","","",27,null],[11,"mul_assign","","",27,null],[11,"div","","",27,null],[11,"div","","",27,null],[11,"div_assign","","",27,null],[11,"div_assign","","",27,null],[11,"add","","",27,null],[11,"add","","",27,null],[11,"add_assign","","",27,null],[11,"add_assign","","",27,null],[11,"sub","","",27,null],[11,"sub","","",27,null],[11,"sub_assign","","",27,null],[11,"sub_assign","","",27,null],[11,"neg","","",27,null],[11,"dot","","",27,null],[11,"norm_squared","","",27,null],[11,"normalize","","",27,null],[11,"normalize_mut","","",27,null],[11,"mean","","",27,null],[11,"approx_epsilon","","",27,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",27,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",27,null],[11,"approx_eq_ulps","","",27,null],[11,"new_zeros","","Builds a vector filled with zeros.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"new_ones","","Builds a vector filled with ones.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"new_random","","Builds a vector filled with random values.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",27,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",27,null],[11,"len","","The number of elements of this vector.",27,null],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",27,{"inputs":[{"name":"usize"}],"output":{"name":"dvector1"}}],[11,"eq","","",27,null],[11,"clone","","",27,null],[11,"from_element","","Builds a vector filled with a constant.",27,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector1"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",27,null],[11,"from_fn","","Builds a vector filled with the result of a function.",27,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector1"}}],[11,"from_iter","","",27,{"inputs":[{"name":"i"}],"output":{"name":"dvector1"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",29,null],[11,"as_ref","","",29,null],[11,"as_mut","","",29,null],[11,"shape","","",29,null],[11,"swap","","",29,null],[11,"unsafe_at","","",29,null],[11,"unsafe_set","","",29,null],[11,"index","","",29,null],[11,"index_mut","","",29,null],[11,"iter","","",29,null],[11,"iter_mut","","",29,null],[11,"axpy","","",29,null],[11,"mul","","",29,null],[11,"mul","","",29,null],[11,"mul_assign","","",29,null],[11,"mul_assign","","",29,null],[11,"div","","",29,null],[11,"div","","",29,null],[11,"div_assign","","",29,null],[11,"div_assign","","",29,null],[11,"add","","",29,null],[11,"add","","",29,null],[11,"add_assign","","",29,null],[11,"add_assign","","",29,null],[11,"sub","","",29,null],[11,"sub","","",29,null],[11,"sub_assign","","",29,null],[11,"sub_assign","","",29,null],[11,"neg","","",29,null],[11,"dot","","",29,null],[11,"norm_squared","","",29,null],[11,"normalize","","",29,null],[11,"normalize_mut","","",29,null],[11,"mean","","",29,null],[11,"approx_epsilon","","",29,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",29,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",29,null],[11,"approx_eq_ulps","","",29,null],[11,"new_zeros","","Builds a vector filled with zeros.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"new_ones","","Builds a vector filled with ones.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"new_random","","Builds a vector filled with random values.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",29,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",29,null],[11,"len","","The number of elements of this vector.",29,null],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",29,{"inputs":[{"name":"usize"}],"output":{"name":"dvector2"}}],[11,"eq","","",29,null],[11,"clone","","",29,null],[11,"from_element","","Builds a vector filled with a constant.",29,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector2"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",29,null],[11,"from_fn","","Builds a vector filled with the result of a function.",29,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector2"}}],[11,"from_iter","","",29,{"inputs":[{"name":"i"}],"output":{"name":"dvector2"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",31,null],[11,"as_ref","","",31,null],[11,"as_mut","","",31,null],[11,"shape","","",31,null],[11,"swap","","",31,null],[11,"unsafe_at","","",31,null],[11,"unsafe_set","","",31,null],[11,"index","","",31,null],[11,"index_mut","","",31,null],[11,"iter","","",31,null],[11,"iter_mut","","",31,null],[11,"axpy","","",31,null],[11,"mul","","",31,null],[11,"mul","","",31,null],[11,"mul_assign","","",31,null],[11,"mul_assign","","",31,null],[11,"div","","",31,null],[11,"div","","",31,null],[11,"div_assign","","",31,null],[11,"div_assign","","",31,null],[11,"add","","",31,null],[11,"add","","",31,null],[11,"add_assign","","",31,null],[11,"add_assign","","",31,null],[11,"sub","","",31,null],[11,"sub","","",31,null],[11,"sub_assign","","",31,null],[11,"sub_assign","","",31,null],[11,"neg","","",31,null],[11,"dot","","",31,null],[11,"norm_squared","","",31,null],[11,"normalize","","",31,null],[11,"normalize_mut","","",31,null],[11,"mean","","",31,null],[11,"approx_epsilon","","",31,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",31,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",31,null],[11,"approx_eq_ulps","","",31,null],[11,"new_zeros","","Builds a vector filled with zeros.",31,{"inputs":[{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"new_ones","","Builds a vector filled with ones.",31,{"inputs":[{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"new_random","","Builds a vector filled with random values.",31,{"inputs":[{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",31,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",31,null],[11,"len","","The number of elements of this vector.",31,null],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",31,{"inputs":[{"name":"usize"}],"output":{"name":"dvector3"}}],[11,"eq","","",31,null],[11,"clone","","",31,null],[11,"from_element","","Builds a vector filled with a constant.",31,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector3"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",31,null],[11,"from_fn","","Builds a vector filled with the result of a function.",31,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector3"}}],[11,"from_iter","","",31,{"inputs":[{"name":"i"}],"output":{"name":"dvector3"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",33,null],[11,"as_ref","","",33,null],[11,"as_mut","","",33,null],[11,"shape","","",33,null],[11,"swap","","",33,null],[11,"unsafe_at","","",33,null],[11,"unsafe_set","","",33,null],[11,"index","","",33,null],[11,"index_mut","","",33,null],[11,"iter","","",33,null],[11,"iter_mut","","",33,null],[11,"axpy","","",33,null],[11,"mul","","",33,null],[11,"mul","","",33,null],[11,"mul_assign","","",33,null],[11,"mul_assign","","",33,null],[11,"div","","",33,null],[11,"div","","",33,null],[11,"div_assign","","",33,null],[11,"div_assign","","",33,null],[11,"add","","",33,null],[11,"add","","",33,null],[11,"add_assign","","",33,null],[11,"add_assign","","",33,null],[11,"sub","","",33,null],[11,"sub","","",33,null],[11,"sub_assign","","",33,null],[11,"sub_assign","","",33,null],[11,"neg","","",33,null],[11,"dot","","",33,null],[11,"norm_squared","","",33,null],[11,"normalize","","",33,null],[11,"normalize_mut","","",33,null],[11,"mean","","",33,null],[11,"approx_epsilon","","",33,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",33,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",33,null],[11,"approx_eq_ulps","","",33,null],[11,"new_zeros","","Builds a vector filled with zeros.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"new_ones","","Builds a vector filled with ones.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"new_random","","Builds a vector filled with random values.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",33,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",33,null],[11,"len","","The number of elements of this vector.",33,null],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",33,{"inputs":[{"name":"usize"}],"output":{"name":"dvector4"}}],[11,"eq","","",33,null],[11,"clone","","",33,null],[11,"from_element","","Builds a vector filled with a constant.",33,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector4"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",33,null],[11,"from_fn","","Builds a vector filled with the result of a function.",33,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector4"}}],[11,"from_iter","","",33,{"inputs":[{"name":"i"}],"output":{"name":"dvector4"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",35,null],[11,"as_ref","","",35,null],[11,"as_mut","","",35,null],[11,"shape","","",35,null],[11,"swap","","",35,null],[11,"unsafe_at","","",35,null],[11,"unsafe_set","","",35,null],[11,"index","","",35,null],[11,"index_mut","","",35,null],[11,"iter","","",35,null],[11,"iter_mut","","",35,null],[11,"axpy","","",35,null],[11,"mul","","",35,null],[11,"mul","","",35,null],[11,"mul_assign","","",35,null],[11,"mul_assign","","",35,null],[11,"div","","",35,null],[11,"div","","",35,null],[11,"div_assign","","",35,null],[11,"div_assign","","",35,null],[11,"add","","",35,null],[11,"add","","",35,null],[11,"add_assign","","",35,null],[11,"add_assign","","",35,null],[11,"sub","","",35,null],[11,"sub","","",35,null],[11,"sub_assign","","",35,null],[11,"sub_assign","","",35,null],[11,"neg","","",35,null],[11,"dot","","",35,null],[11,"norm_squared","","",35,null],[11,"normalize","","",35,null],[11,"normalize_mut","","",35,null],[11,"mean","","",35,null],[11,"approx_epsilon","","",35,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",35,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",35,null],[11,"approx_eq_ulps","","",35,null],[11,"new_zeros","","Builds a vector filled with zeros.",35,{"inputs":[{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"new_ones","","Builds a vector filled with ones.",35,{"inputs":[{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"new_random","","Builds a vector filled with random values.",35,{"inputs":[{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",35,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",35,null],[11,"len","","The number of elements of this vector.",35,null],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",35,{"inputs":[{"name":"usize"}],"output":{"name":"dvector5"}}],[11,"eq","","",35,null],[11,"clone","","",35,null],[11,"from_element","","Builds a vector filled with a constant.",35,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector5"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",35,null],[11,"from_fn","","Builds a vector filled with the result of a function.",35,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector5"}}],[11,"from_iter","","",35,{"inputs":[{"name":"i"}],"output":{"name":"dvector5"}}],[11,"is_zero","","Tests if all components of the vector are zeroes.",37,null],[11,"as_ref","","",37,null],[11,"as_mut","","",37,null],[11,"shape","","",37,null],[11,"swap","","",37,null],[11,"unsafe_at","","",37,null],[11,"unsafe_set","","",37,null],[11,"index","","",37,null],[11,"index_mut","","",37,null],[11,"iter","","",37,null],[11,"iter_mut","","",37,null],[11,"axpy","","",37,null],[11,"mul","","",37,null],[11,"mul","","",37,null],[11,"mul_assign","","",37,null],[11,"mul_assign","","",37,null],[11,"div","","",37,null],[11,"div","","",37,null],[11,"div_assign","","",37,null],[11,"div_assign","","",37,null],[11,"add","","",37,null],[11,"add","","",37,null],[11,"add_assign","","",37,null],[11,"add_assign","","",37,null],[11,"sub","","",37,null],[11,"sub","","",37,null],[11,"sub_assign","","",37,null],[11,"sub_assign","","",37,null],[11,"neg","","",37,null],[11,"dot","","",37,null],[11,"norm_squared","","",37,null],[11,"normalize","","",37,null],[11,"normalize_mut","","",37,null],[11,"mean","","",37,null],[11,"approx_epsilon","","",37,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",37,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",37,null],[11,"approx_eq_ulps","","",37,null],[11,"new_zeros","","Builds a vector filled with zeros.",37,{"inputs":[{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"new_ones","","Builds a vector filled with ones.",37,{"inputs":[{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"new_random","","Builds a vector filled with random values.",37,{"inputs":[{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"canonical_basis_with_dimension","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",37,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",37,null],[11,"len","","The number of elements of this vector.",37,null],[11,"new_uninitialized","","Creates an uninitialized vector of dimension `dimension`.",37,{"inputs":[{"name":"usize"}],"output":{"name":"dvector6"}}],[11,"eq","","",37,null],[11,"clone","","",37,null],[11,"from_element","","Builds a vector filled with a constant.",37,{"inputs":[{"name":"usize"},{"name":"n"}],"output":{"name":"dvector6"}}],[11,"from_slice","","Builds a vector filled with the components provided by a vector.",37,null],[11,"from_fn","","Builds a vector filled with the result of a function.",37,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"dvector6"}}],[11,"from_iter","","",37,{"inputs":[{"name":"i"}],"output":{"name":"dvector6"}}],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"encode","","",11,null],[11,"decode","","",11,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",11,null],[11,"hash","","",11,null],[11,"fmt","","",11,null],[11,"new","","Creates a new vector.",11,{"inputs":[{"name":"n"}],"output":{"name":"vector1"}}],[11,"inf","","",11,null],[11,"sup","","",11,null],[11,"partial_cmp","","",11,null],[11,"partial_lt","","",11,null],[11,"partial_le","","",11,null],[11,"partial_gt","","",11,null],[11,"partial_ge","","",11,null],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"from","","",11,{"inputs":[{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"as_ref","","",11,null],[11,"as_mut","","",11,null],[11,"from","","",11,null],[11,"index","","",11,null],[11,"index_mut","","",11,null],[11,"shape","","",11,null],[11,"swap","","",11,null],[11,"unsafe_at","","",11,null],[11,"unsafe_set","","",11,null],[11,"at_fast","","Unsafe read access to a vector element by index.",11,null],[11,"set_fast","","Unsafe write access to a vector element by index.",11,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",11,{"inputs":[{"name":"n"}],"output":{"name":"vector1"}}],[11,"dimension","","",11,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","The dimension of this entity.",11,null],[11,"add","","",11,null],[11,"add_assign","","",11,null],[11,"sub","","",11,null],[11,"sub_assign","","",11,null],[11,"mul","","",11,null],[11,"mul_assign","","",11,null],[11,"div","","",11,null],[11,"div_assign","","",11,null],[11,"add","","",11,null],[11,"add_assign","","",11,null],[11,"sub","","",11,null],[11,"sub_assign","","",11,null],[11,"mul","","",11,null],[11,"mul_assign","","",11,null],[11,"div","","",11,null],[11,"div_assign","","",11,null],[11,"neg","","",11,null],[11,"dot","","",11,null],[11,"translation","","",11,null],[11,"inverse_translation","","",11,null],[11,"append_translation_mut","","",11,null],[11,"append_translation","","",11,null],[11,"prepend_translation_mut","","",11,null],[11,"prepend_translation","","",11,null],[11,"set_translation","","",11,null],[11,"norm_squared","","",11,null],[11,"normalize","","",11,null],[11,"normalize_mut","","",11,null],[11,"approx_epsilon","","",11,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",11,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",11,null],[11,"approx_eq_eps","","",11,null],[11,"approx_eq_ulps","","",11,null],[11,"one","","",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"zero","","",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"is_zero","","",11,null],[11,"from_iter","","",11,{"inputs":[{"name":"i"}],"output":{"name":"vector1"}}],[11,"max_value","","",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"min_value","","",11,{"inputs":[],"output":{"name":"vector1"}}],[11,"axpy","","",11,null],[11,"iter","","",11,null],[11,"iter_mut","","",11,null],[11,"to_homogeneous","","",11,null],[11,"from","","",11,{"inputs":[{"name":"vector2"}],"output":{"name":"vector1"}}],[11,"translate","","",11,null],[11,"inverse_translate","","",11,null],[11,"rotate","","",11,null],[11,"inverse_rotate","","",11,null],[11,"rotate","","",17,null],[11,"inverse_rotate","","",17,null],[11,"transform","","",11,null],[11,"inverse_transform","","",11,null],[11,"to_point","","Converts this vector to a point.",11,null],[11,"as_point","","Reinterprets this vector as a point.",11,null],[11,"abs","","",11,{"inputs":[{"name":"vector1"}],"output":{"name":"vector1"}}],[11,"rand","","",11,{"inputs":[{"name":"r"}],"output":{"name":"vector1"}}],[11,"mean","","",11,null],[11,"fmt","","",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"encode","","",12,null],[11,"decode","","",12,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",12,null],[11,"hash","","",12,null],[11,"fmt","","",12,null],[11,"new","","Creates a new vector.",12,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"vector2"}}],[11,"inf","","",12,null],[11,"sup","","",12,null],[11,"partial_cmp","","",12,null],[11,"partial_lt","","",12,null],[11,"partial_le","","",12,null],[11,"partial_gt","","",12,null],[11,"partial_ge","","",12,null],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"from","","",12,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"as_ref","","",12,null],[11,"as_mut","","",12,null],[11,"from","","",12,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"shape","","",12,null],[11,"swap","","",12,null],[11,"unsafe_at","","",12,null],[11,"unsafe_set","","",12,null],[11,"at_fast","","Unsafe read access to a vector element by index.",12,null],[11,"set_fast","","Unsafe write access to a vector element by index.",12,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",12,{"inputs":[{"name":"n"}],"output":{"name":"vector2"}}],[11,"dimension","","",12,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","The dimension of this entity.",12,null],[11,"add","","",12,null],[11,"add_assign","","",12,null],[11,"sub","","",12,null],[11,"sub_assign","","",12,null],[11,"mul","","",12,null],[11,"mul_assign","","",12,null],[11,"div","","",12,null],[11,"div_assign","","",12,null],[11,"add","","",12,null],[11,"add_assign","","",12,null],[11,"sub","","",12,null],[11,"sub_assign","","",12,null],[11,"mul","","",12,null],[11,"mul_assign","","",12,null],[11,"div","","",12,null],[11,"div_assign","","",12,null],[11,"neg","","",12,null],[11,"dot","","",12,null],[11,"translation","","",12,null],[11,"inverse_translation","","",12,null],[11,"append_translation_mut","","",12,null],[11,"append_translation","","",12,null],[11,"prepend_translation_mut","","",12,null],[11,"prepend_translation","","",12,null],[11,"set_translation","","",12,null],[11,"norm_squared","","",12,null],[11,"normalize","","",12,null],[11,"normalize_mut","","",12,null],[11,"approx_epsilon","","",12,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",12,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",12,null],[11,"approx_eq_eps","","",12,null],[11,"approx_eq_ulps","","",12,null],[11,"one","","",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"zero","","",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"is_zero","","",12,null],[11,"from_iter","","",12,{"inputs":[{"name":"i"}],"output":{"name":"vector2"}}],[11,"max_value","","",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"min_value","","",12,{"inputs":[],"output":{"name":"vector2"}}],[11,"axpy","","",12,null],[11,"iter","","",12,null],[11,"iter_mut","","",12,null],[11,"to_homogeneous","","",12,null],[11,"from","","",12,{"inputs":[{"name":"vector3"}],"output":{"name":"vector2"}}],[11,"translate","","",12,null],[11,"inverse_translate","","",12,null],[11,"rotate","","",12,null],[11,"inverse_rotate","","",12,null],[11,"rotate","","",18,null],[11,"inverse_rotate","","",18,null],[11,"transform","","",12,null],[11,"inverse_transform","","",12,null],[11,"to_point","","Converts this vector to a point.",12,null],[11,"as_point","","Reinterprets this vector as a point.",12,null],[11,"abs","","",12,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"vector2"}}],[11,"mean","","",12,null],[11,"fmt","","",12,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"encode","","",13,null],[11,"decode","","",13,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",13,null],[11,"hash","","",13,null],[11,"fmt","","",13,null],[11,"new","","Creates a new vector.",13,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vector3"}}],[11,"inf","","",13,null],[11,"sup","","",13,null],[11,"partial_cmp","","",13,null],[11,"partial_lt","","",13,null],[11,"partial_le","","",13,null],[11,"partial_gt","","",13,null],[11,"partial_ge","","",13,null],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"from","","",13,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"as_ref","","",13,null],[11,"as_mut","","",13,null],[11,"from","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"shape","","",13,null],[11,"swap","","",13,null],[11,"unsafe_at","","",13,null],[11,"unsafe_set","","",13,null],[11,"at_fast","","Unsafe read access to a vector element by index.",13,null],[11,"set_fast","","Unsafe write access to a vector element by index.",13,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",13,{"inputs":[{"name":"n"}],"output":{"name":"vector3"}}],[11,"dimension","","",13,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","The dimension of this entity.",13,null],[11,"add","","",13,null],[11,"add_assign","","",13,null],[11,"sub","","",13,null],[11,"sub_assign","","",13,null],[11,"mul","","",13,null],[11,"mul_assign","","",13,null],[11,"div","","",13,null],[11,"div_assign","","",13,null],[11,"add","","",13,null],[11,"add_assign","","",13,null],[11,"sub","","",13,null],[11,"sub_assign","","",13,null],[11,"mul","","",13,null],[11,"mul_assign","","",13,null],[11,"div","","",13,null],[11,"div_assign","","",13,null],[11,"neg","","",13,null],[11,"dot","","",13,null],[11,"translation","","",13,null],[11,"inverse_translation","","",13,null],[11,"append_translation_mut","","",13,null],[11,"append_translation","","",13,null],[11,"prepend_translation_mut","","",13,null],[11,"prepend_translation","","",13,null],[11,"set_translation","","",13,null],[11,"norm_squared","","",13,null],[11,"normalize","","",13,null],[11,"normalize_mut","","",13,null],[11,"approx_epsilon","","",13,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",13,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",13,null],[11,"approx_eq_eps","","",13,null],[11,"approx_eq_ulps","","",13,null],[11,"one","","",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"zero","","",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"is_zero","","",13,null],[11,"from_iter","","",13,{"inputs":[{"name":"i"}],"output":{"name":"vector3"}}],[11,"max_value","","",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"min_value","","",13,{"inputs":[],"output":{"name":"vector3"}}],[11,"axpy","","",13,null],[11,"iter","","",13,null],[11,"iter_mut","","",13,null],[11,"to_homogeneous","","",13,null],[11,"from","","",13,{"inputs":[{"name":"vector4"}],"output":{"name":"vector3"}}],[11,"translate","","",13,null],[11,"inverse_translate","","",13,null],[11,"rotate","","",13,null],[11,"inverse_rotate","","",13,null],[11,"rotate","","",19,null],[11,"inverse_rotate","","",19,null],[11,"transform","","",13,null],[11,"inverse_transform","","",13,null],[11,"to_point","","Converts this vector to a point.",13,null],[11,"as_point","","Reinterprets this vector as a point.",13,null],[11,"abs","","",13,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"rand","","",13,{"inputs":[{"name":"r"}],"output":{"name":"vector3"}}],[11,"mean","","",13,null],[11,"fmt","","",13,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"encode","","",14,null],[11,"decode","","",14,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",14,null],[11,"hash","","",14,null],[11,"fmt","","",14,null],[11,"new","","Creates a new vector.",14,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vector4"}}],[11,"inf","","",14,null],[11,"sup","","",14,null],[11,"partial_cmp","","",14,null],[11,"partial_lt","","",14,null],[11,"partial_le","","",14,null],[11,"partial_gt","","",14,null],[11,"partial_ge","","",14,null],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"from","","",14,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"as_ref","","",14,null],[11,"as_mut","","",14,null],[11,"from","","",14,null],[11,"index","","",14,null],[11,"index_mut","","",14,null],[11,"shape","","",14,null],[11,"swap","","",14,null],[11,"unsafe_at","","",14,null],[11,"unsafe_set","","",14,null],[11,"at_fast","","Unsafe read access to a vector element by index.",14,null],[11,"set_fast","","Unsafe write access to a vector element by index.",14,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",14,{"inputs":[{"name":"n"}],"output":{"name":"vector4"}}],[11,"dimension","","",14,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","The dimension of this entity.",14,null],[11,"canonical_basis","","",14,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",14,{"inputs":[{"name":"vector4"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",14,null],[11,"add_assign","","",14,null],[11,"sub","","",14,null],[11,"sub_assign","","",14,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"div","","",14,null],[11,"div_assign","","",14,null],[11,"add","","",14,null],[11,"add_assign","","",14,null],[11,"sub","","",14,null],[11,"sub_assign","","",14,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"div","","",14,null],[11,"div_assign","","",14,null],[11,"neg","","",14,null],[11,"dot","","",14,null],[11,"translation","","",14,null],[11,"inverse_translation","","",14,null],[11,"append_translation_mut","","",14,null],[11,"append_translation","","",14,null],[11,"prepend_translation_mut","","",14,null],[11,"prepend_translation","","",14,null],[11,"set_translation","","",14,null],[11,"norm_squared","","",14,null],[11,"normalize","","",14,null],[11,"normalize_mut","","",14,null],[11,"approx_epsilon","","",14,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",14,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",14,null],[11,"approx_eq_eps","","",14,null],[11,"approx_eq_ulps","","",14,null],[11,"one","","",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"zero","","",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"is_zero","","",14,null],[11,"from_iter","","",14,{"inputs":[{"name":"i"}],"output":{"name":"vector4"}}],[11,"max_value","","",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"min_value","","",14,{"inputs":[],"output":{"name":"vector4"}}],[11,"axpy","","",14,null],[11,"iter","","",14,null],[11,"iter_mut","","",14,null],[11,"to_homogeneous","","",14,null],[11,"from","","",14,{"inputs":[{"name":"vector5"}],"output":{"name":"vector4"}}],[11,"translate","","",14,null],[11,"inverse_translate","","",14,null],[11,"rotate","","",14,null],[11,"inverse_rotate","","",14,null],[11,"rotate","","",20,null],[11,"inverse_rotate","","",20,null],[11,"transform","","",14,null],[11,"inverse_transform","","",14,null],[11,"to_point","","Converts this vector to a point.",14,null],[11,"as_point","","Reinterprets this vector as a point.",14,null],[11,"abs","","",14,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"rand","","",14,{"inputs":[{"name":"r"}],"output":{"name":"vector4"}}],[11,"mean","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"encode","","",15,null],[11,"decode","","",15,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",15,null],[11,"hash","","",15,null],[11,"fmt","","",15,null],[11,"new","","Creates a new vector.",15,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vector5"}}],[11,"inf","","",15,null],[11,"sup","","",15,null],[11,"partial_cmp","","",15,null],[11,"partial_lt","","",15,null],[11,"partial_le","","",15,null],[11,"partial_gt","","",15,null],[11,"partial_ge","","",15,null],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"from","","",15,{"inputs":[{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"as_ref","","",15,null],[11,"as_mut","","",15,null],[11,"from","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"shape","","",15,null],[11,"swap","","",15,null],[11,"unsafe_at","","",15,null],[11,"unsafe_set","","",15,null],[11,"at_fast","","Unsafe read access to a vector element by index.",15,null],[11,"set_fast","","Unsafe write access to a vector element by index.",15,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",15,{"inputs":[{"name":"n"}],"output":{"name":"vector5"}}],[11,"dimension","","",15,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","The dimension of this entity.",15,null],[11,"canonical_basis","","",15,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",15,{"inputs":[{"name":"vector5"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",15,null],[11,"add_assign","","",15,null],[11,"sub","","",15,null],[11,"sub_assign","","",15,null],[11,"mul","","",15,null],[11,"mul_assign","","",15,null],[11,"div","","",15,null],[11,"div_assign","","",15,null],[11,"add","","",15,null],[11,"add_assign","","",15,null],[11,"sub","","",15,null],[11,"sub_assign","","",15,null],[11,"mul","","",15,null],[11,"mul_assign","","",15,null],[11,"div","","",15,null],[11,"div_assign","","",15,null],[11,"neg","","",15,null],[11,"dot","","",15,null],[11,"translation","","",15,null],[11,"inverse_translation","","",15,null],[11,"append_translation_mut","","",15,null],[11,"append_translation","","",15,null],[11,"prepend_translation_mut","","",15,null],[11,"prepend_translation","","",15,null],[11,"set_translation","","",15,null],[11,"norm_squared","","",15,null],[11,"normalize","","",15,null],[11,"normalize_mut","","",15,null],[11,"approx_epsilon","","",15,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",15,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",15,null],[11,"approx_eq_eps","","",15,null],[11,"approx_eq_ulps","","",15,null],[11,"one","","",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"zero","","",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"is_zero","","",15,null],[11,"from_iter","","",15,{"inputs":[{"name":"i"}],"output":{"name":"vector5"}}],[11,"max_value","","",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"min_value","","",15,{"inputs":[],"output":{"name":"vector5"}}],[11,"axpy","","",15,null],[11,"iter","","",15,null],[11,"iter_mut","","",15,null],[11,"to_homogeneous","","",15,null],[11,"from","","",15,{"inputs":[{"name":"vector6"}],"output":{"name":"vector5"}}],[11,"translate","","",15,null],[11,"inverse_translate","","",15,null],[11,"rotate","","",15,null],[11,"inverse_rotate","","",15,null],[11,"rotate","","",21,null],[11,"inverse_rotate","","",21,null],[11,"transform","","",15,null],[11,"inverse_transform","","",15,null],[11,"to_point","","Converts this vector to a point.",15,null],[11,"as_point","","Reinterprets this vector as a point.",15,null],[11,"abs","","",15,{"inputs":[{"name":"vector5"}],"output":{"name":"vector5"}}],[11,"rand","","",15,{"inputs":[{"name":"r"}],"output":{"name":"vector5"}}],[11,"mean","","",15,null],[11,"fmt","","",15,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"encode","","",16,null],[11,"decode","","",16,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",16,null],[11,"hash","","",16,null],[11,"fmt","","",16,null],[11,"new","","Creates a new vector.",16,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"vector6"}}],[11,"inf","","",16,null],[11,"sup","","",16,null],[11,"partial_cmp","","",16,null],[11,"partial_lt","","",16,null],[11,"partial_le","","",16,null],[11,"partial_gt","","",16,null],[11,"partial_ge","","",16,null],[11,"x","","Create a unit vector with its `$compN` component equal to 1.0.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"y","","Create a unit vector with its `$compN` component equal to 1.0.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"z","","Create a unit vector with its `$compN` component equal to 1.0.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"a","","Create a unit vector with its `$compN` component equal to 1.0.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"b","","Create a unit vector with its `$compN` component equal to 1.0.",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"from","","",16,{"inputs":[{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"as_ref","","",16,null],[11,"as_mut","","",16,null],[11,"from","","",16,null],[11,"index","","",16,null],[11,"index_mut","","",16,null],[11,"shape","","",16,null],[11,"swap","","",16,null],[11,"unsafe_at","","",16,null],[11,"unsafe_set","","",16,null],[11,"at_fast","","Unsafe read access to a vector element by index.",16,null],[11,"set_fast","","Unsafe write access to a vector element by index.",16,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",16,{"inputs":[{"name":"n"}],"output":{"name":"vector6"}}],[11,"dimension","","",16,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","The dimension of this entity.",16,null],[11,"canonical_basis","","",16,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",16,{"inputs":[{"name":"vector6"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","",16,null],[11,"add_assign","","",16,null],[11,"sub","","",16,null],[11,"sub_assign","","",16,null],[11,"mul","","",16,null],[11,"mul_assign","","",16,null],[11,"div","","",16,null],[11,"div_assign","","",16,null],[11,"add","","",16,null],[11,"add_assign","","",16,null],[11,"sub","","",16,null],[11,"sub_assign","","",16,null],[11,"mul","","",16,null],[11,"mul_assign","","",16,null],[11,"div","","",16,null],[11,"div_assign","","",16,null],[11,"neg","","",16,null],[11,"dot","","",16,null],[11,"translation","","",16,null],[11,"inverse_translation","","",16,null],[11,"append_translation_mut","","",16,null],[11,"append_translation","","",16,null],[11,"prepend_translation_mut","","",16,null],[11,"prepend_translation","","",16,null],[11,"set_translation","","",16,null],[11,"norm_squared","","",16,null],[11,"normalize","","",16,null],[11,"normalize_mut","","",16,null],[11,"approx_epsilon","","",16,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",16,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",16,null],[11,"approx_eq_eps","","",16,null],[11,"approx_eq_ulps","","",16,null],[11,"one","","",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"zero","","",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"is_zero","","",16,null],[11,"from_iter","","",16,{"inputs":[{"name":"i"}],"output":{"name":"vector6"}}],[11,"max_value","","",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"min_value","","",16,{"inputs":[],"output":{"name":"vector6"}}],[11,"axpy","","",16,null],[11,"iter","","",16,null],[11,"iter_mut","","",16,null],[11,"translate","","",16,null],[11,"inverse_translate","","",16,null],[11,"rotate","","",16,null],[11,"inverse_rotate","","",16,null],[11,"rotate","","",22,null],[11,"inverse_rotate","","",22,null],[11,"transform","","",16,null],[11,"inverse_transform","","",16,null],[11,"to_point","","Converts this vector to a point.",16,null],[11,"as_point","","Reinterprets this vector as a point.",16,null],[11,"abs","","",16,{"inputs":[{"name":"vector6"}],"output":{"name":"vector6"}}],[11,"rand","","",16,{"inputs":[{"name":"r"}],"output":{"name":"vector6"}}],[11,"mean","","",16,null],[11,"fmt","","",16,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"encode","","",17,null],[11,"decode","","",17,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",17,null],[11,"hash","","",17,null],[11,"fmt","","",17,null],[11,"new","","Creates a new vector.",17,{"inputs":[{"name":"n"}],"output":{"name":"point1"}}],[11,"origin","","",17,{"inputs":[],"output":{"name":"point1"}}],[11,"is_origin","","",17,null],[11,"inf","","",17,null],[11,"sup","","",17,null],[11,"partial_cmp","","",17,null],[11,"partial_lt","","",17,null],[11,"partial_le","","",17,null],[11,"partial_gt","","",17,null],[11,"partial_ge","","",17,null],[11,"mul","","",17,null],[11,"mul_assign","","",17,null],[11,"div","","",17,null],[11,"div_assign","","",17,null],[11,"add","","",17,null],[11,"add_assign","","",17,null],[11,"sub","","",17,null],[11,"sub_assign","","",17,null],[11,"from","","",17,{"inputs":[{"name":"point1"}],"output":{"name":"point1"}}],[11,"as_ref","","",17,null],[11,"as_mut","","",17,null],[11,"from","","",17,null],[11,"index","","",17,null],[11,"index_mut","","",17,null],[11,"shape","","",17,null],[11,"swap","","",17,null],[11,"unsafe_at","","",17,null],[11,"unsafe_set","","",17,null],[11,"at_fast","","Unsafe read access to a vector element by index.",17,null],[11,"set_fast","","Unsafe write access to a vector element by index.",17,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",17,{"inputs":[{"name":"n"}],"output":{"name":"point1"}}],[11,"dimension","","",17,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","The dimension of this entity.",17,null],[11,"to_vector","","Converts this point to its associated vector.",17,null],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",17,null],[11,"to_vector","","",17,null],[11,"as_vector","","",17,null],[11,"set_coords","","",17,null],[11,"sub","","",17,null],[11,"neg","","",17,null],[11,"add","","",17,null],[11,"add_assign","","",17,null],[11,"sub","","",17,null],[11,"sub_assign","","",17,null],[11,"approx_epsilon","","",17,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",17,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",17,null],[11,"approx_eq_eps","","",17,null],[11,"approx_eq_ulps","","",17,null],[11,"from_iter","","",17,{"inputs":[{"name":"i"}],"output":{"name":"point1"}}],[11,"max_value","","",17,{"inputs":[],"output":{"name":"point1"}}],[11,"min_value","","",17,{"inputs":[],"output":{"name":"point1"}}],[11,"axpy","","",17,null],[11,"iter","","",17,null],[11,"iter_mut","","",17,null],[11,"to_homogeneous","","",17,null],[11,"from","","",17,{"inputs":[{"name":"point2"}],"output":{"name":"point1"}}],[11,"rand","","",17,{"inputs":[{"name":"r"}],"output":{"name":"point1"}}],[11,"fmt","","",17,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"encode","","",18,null],[11,"decode","","",18,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",18,null],[11,"hash","","",18,null],[11,"fmt","","",18,null],[11,"new","","Creates a new vector.",18,{"inputs":[{"name":"n"},{"name":"n"}],"output":{"name":"point2"}}],[11,"origin","","",18,{"inputs":[],"output":{"name":"point2"}}],[11,"is_origin","","",18,null],[11,"inf","","",18,null],[11,"sup","","",18,null],[11,"partial_cmp","","",18,null],[11,"partial_lt","","",18,null],[11,"partial_le","","",18,null],[11,"partial_gt","","",18,null],[11,"partial_ge","","",18,null],[11,"mul","","",18,null],[11,"mul_assign","","",18,null],[11,"div","","",18,null],[11,"div_assign","","",18,null],[11,"add","","",18,null],[11,"add_assign","","",18,null],[11,"sub","","",18,null],[11,"sub_assign","","",18,null],[11,"from","","",18,{"inputs":[{"name":"point2"}],"output":{"name":"point2"}}],[11,"as_ref","","",18,null],[11,"as_mut","","",18,null],[11,"from","","",18,null],[11,"index","","",18,null],[11,"index_mut","","",18,null],[11,"shape","","",18,null],[11,"swap","","",18,null],[11,"unsafe_at","","",18,null],[11,"unsafe_set","","",18,null],[11,"at_fast","","Unsafe read access to a vector element by index.",18,null],[11,"set_fast","","Unsafe write access to a vector element by index.",18,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",18,{"inputs":[{"name":"n"}],"output":{"name":"point2"}}],[11,"dimension","","",18,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","The dimension of this entity.",18,null],[11,"to_vector","","Converts this point to its associated vector.",18,null],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",18,null],[11,"to_vector","","",18,null],[11,"as_vector","","",18,null],[11,"set_coords","","",18,null],[11,"sub","","",18,null],[11,"neg","","",18,null],[11,"add","","",18,null],[11,"add_assign","","",18,null],[11,"sub","","",18,null],[11,"sub_assign","","",18,null],[11,"approx_epsilon","","",18,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",18,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",18,null],[11,"approx_eq_eps","","",18,null],[11,"approx_eq_ulps","","",18,null],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"point2"}}],[11,"max_value","","",18,{"inputs":[],"output":{"name":"point2"}}],[11,"min_value","","",18,{"inputs":[],"output":{"name":"point2"}}],[11,"axpy","","",18,null],[11,"iter","","",18,null],[11,"iter_mut","","",18,null],[11,"to_homogeneous","","",18,null],[11,"from","","",18,{"inputs":[{"name":"point3"}],"output":{"name":"point2"}}],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"point2"}}],[11,"fmt","","",18,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"encode","","",19,null],[11,"decode","","",19,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",19,null],[11,"hash","","",19,null],[11,"fmt","","",19,null],[11,"new","","Creates a new vector.",19,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point3"}}],[11,"origin","","",19,{"inputs":[],"output":{"name":"point3"}}],[11,"is_origin","","",19,null],[11,"inf","","",19,null],[11,"sup","","",19,null],[11,"partial_cmp","","",19,null],[11,"partial_lt","","",19,null],[11,"partial_le","","",19,null],[11,"partial_gt","","",19,null],[11,"partial_ge","","",19,null],[11,"mul","","",19,null],[11,"mul_assign","","",19,null],[11,"div","","",19,null],[11,"div_assign","","",19,null],[11,"add","","",19,null],[11,"add_assign","","",19,null],[11,"sub","","",19,null],[11,"sub_assign","","",19,null],[11,"from","","",19,{"inputs":[{"name":"point3"}],"output":{"name":"point3"}}],[11,"as_ref","","",19,null],[11,"as_mut","","",19,null],[11,"from","","",19,null],[11,"index","","",19,null],[11,"index_mut","","",19,null],[11,"shape","","",19,null],[11,"swap","","",19,null],[11,"unsafe_at","","",19,null],[11,"unsafe_set","","",19,null],[11,"at_fast","","Unsafe read access to a vector element by index.",19,null],[11,"set_fast","","Unsafe write access to a vector element by index.",19,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",19,{"inputs":[{"name":"n"}],"output":{"name":"point3"}}],[11,"dimension","","",19,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","The dimension of this entity.",19,null],[11,"to_vector","","Converts this point to its associated vector.",19,null],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",19,null],[11,"to_vector","","",19,null],[11,"as_vector","","",19,null],[11,"set_coords","","",19,null],[11,"sub","","",19,null],[11,"neg","","",19,null],[11,"add","","",19,null],[11,"add_assign","","",19,null],[11,"sub","","",19,null],[11,"sub_assign","","",19,null],[11,"approx_epsilon","","",19,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",19,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",19,null],[11,"approx_eq_eps","","",19,null],[11,"approx_eq_ulps","","",19,null],[11,"from_iter","","",19,{"inputs":[{"name":"i"}],"output":{"name":"point3"}}],[11,"max_value","","",19,{"inputs":[],"output":{"name":"point3"}}],[11,"min_value","","",19,{"inputs":[],"output":{"name":"point3"}}],[11,"axpy","","",19,null],[11,"iter","","",19,null],[11,"iter_mut","","",19,null],[11,"to_homogeneous","","",19,null],[11,"from","","",19,{"inputs":[{"name":"point4"}],"output":{"name":"point3"}}],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"point3"}}],[11,"fmt","","",19,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"encode","","",20,null],[11,"decode","","",20,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",20,null],[11,"hash","","",20,null],[11,"fmt","","",20,null],[11,"new","","Creates a new vector.",20,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point4"}}],[11,"origin","","",20,{"inputs":[],"output":{"name":"point4"}}],[11,"is_origin","","",20,null],[11,"inf","","",20,null],[11,"sup","","",20,null],[11,"partial_cmp","","",20,null],[11,"partial_lt","","",20,null],[11,"partial_le","","",20,null],[11,"partial_gt","","",20,null],[11,"partial_ge","","",20,null],[11,"mul","","",20,null],[11,"mul_assign","","",20,null],[11,"div","","",20,null],[11,"div_assign","","",20,null],[11,"add","","",20,null],[11,"add_assign","","",20,null],[11,"sub","","",20,null],[11,"sub_assign","","",20,null],[11,"from","","",20,{"inputs":[{"name":"point4"}],"output":{"name":"point4"}}],[11,"as_ref","","",20,null],[11,"as_mut","","",20,null],[11,"from","","",20,null],[11,"index","","",20,null],[11,"index_mut","","",20,null],[11,"shape","","",20,null],[11,"swap","","",20,null],[11,"unsafe_at","","",20,null],[11,"unsafe_set","","",20,null],[11,"at_fast","","Unsafe read access to a vector element by index.",20,null],[11,"set_fast","","Unsafe write access to a vector element by index.",20,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",20,{"inputs":[{"name":"n"}],"output":{"name":"point4"}}],[11,"dimension","","",20,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","The dimension of this entity.",20,null],[11,"to_vector","","Converts this point to its associated vector.",20,null],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",20,null],[11,"to_vector","","",20,null],[11,"as_vector","","",20,null],[11,"set_coords","","",20,null],[11,"sub","","",20,null],[11,"neg","","",20,null],[11,"add","","",20,null],[11,"add_assign","","",20,null],[11,"sub","","",20,null],[11,"sub_assign","","",20,null],[11,"approx_epsilon","","",20,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",20,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",20,null],[11,"approx_eq_eps","","",20,null],[11,"approx_eq_ulps","","",20,null],[11,"from_iter","","",20,{"inputs":[{"name":"i"}],"output":{"name":"point4"}}],[11,"max_value","","",20,{"inputs":[],"output":{"name":"point4"}}],[11,"min_value","","",20,{"inputs":[],"output":{"name":"point4"}}],[11,"axpy","","",20,null],[11,"iter","","",20,null],[11,"iter_mut","","",20,null],[11,"to_homogeneous","","",20,null],[11,"from","","",20,{"inputs":[{"name":"point5"}],"output":{"name":"point4"}}],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"point4"}}],[11,"fmt","","",20,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"encode","","",21,null],[11,"decode","","",21,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",21,null],[11,"hash","","",21,null],[11,"fmt","","",21,null],[11,"new","","Creates a new vector.",21,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point5"}}],[11,"origin","","",21,{"inputs":[],"output":{"name":"point5"}}],[11,"is_origin","","",21,null],[11,"inf","","",21,null],[11,"sup","","",21,null],[11,"partial_cmp","","",21,null],[11,"partial_lt","","",21,null],[11,"partial_le","","",21,null],[11,"partial_gt","","",21,null],[11,"partial_ge","","",21,null],[11,"mul","","",21,null],[11,"mul_assign","","",21,null],[11,"div","","",21,null],[11,"div_assign","","",21,null],[11,"add","","",21,null],[11,"add_assign","","",21,null],[11,"sub","","",21,null],[11,"sub_assign","","",21,null],[11,"from","","",21,{"inputs":[{"name":"point5"}],"output":{"name":"point5"}}],[11,"as_ref","","",21,null],[11,"as_mut","","",21,null],[11,"from","","",21,null],[11,"index","","",21,null],[11,"index_mut","","",21,null],[11,"shape","","",21,null],[11,"swap","","",21,null],[11,"unsafe_at","","",21,null],[11,"unsafe_set","","",21,null],[11,"at_fast","","Unsafe read access to a vector element by index.",21,null],[11,"set_fast","","Unsafe write access to a vector element by index.",21,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",21,{"inputs":[{"name":"n"}],"output":{"name":"point5"}}],[11,"dimension","","",21,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","The dimension of this entity.",21,null],[11,"to_vector","","Converts this point to its associated vector.",21,null],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",21,null],[11,"to_vector","","",21,null],[11,"as_vector","","",21,null],[11,"set_coords","","",21,null],[11,"sub","","",21,null],[11,"neg","","",21,null],[11,"add","","",21,null],[11,"add_assign","","",21,null],[11,"sub","","",21,null],[11,"sub_assign","","",21,null],[11,"approx_epsilon","","",21,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",21,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",21,null],[11,"approx_eq_eps","","",21,null],[11,"approx_eq_ulps","","",21,null],[11,"from_iter","","",21,{"inputs":[{"name":"i"}],"output":{"name":"point5"}}],[11,"max_value","","",21,{"inputs":[],"output":{"name":"point5"}}],[11,"min_value","","",21,{"inputs":[],"output":{"name":"point5"}}],[11,"axpy","","",21,null],[11,"iter","","",21,null],[11,"iter_mut","","",21,null],[11,"to_homogeneous","","",21,null],[11,"from","","",21,{"inputs":[{"name":"point6"}],"output":{"name":"point5"}}],[11,"rand","","",21,{"inputs":[{"name":"r"}],"output":{"name":"point5"}}],[11,"fmt","","",21,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"encode","","",22,null],[11,"decode","","",22,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",22,null],[11,"hash","","",22,null],[11,"fmt","","",22,null],[11,"new","","Creates a new vector.",22,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"point6"}}],[11,"origin","","",22,{"inputs":[],"output":{"name":"point6"}}],[11,"is_origin","","",22,null],[11,"inf","","",22,null],[11,"sup","","",22,null],[11,"partial_cmp","","",22,null],[11,"partial_lt","","",22,null],[11,"partial_le","","",22,null],[11,"partial_gt","","",22,null],[11,"partial_ge","","",22,null],[11,"mul","","",22,null],[11,"mul_assign","","",22,null],[11,"div","","",22,null],[11,"div_assign","","",22,null],[11,"add","","",22,null],[11,"add_assign","","",22,null],[11,"sub","","",22,null],[11,"sub_assign","","",22,null],[11,"from","","",22,{"inputs":[{"name":"point6"}],"output":{"name":"point6"}}],[11,"as_ref","","",22,null],[11,"as_mut","","",22,null],[11,"from","","",22,null],[11,"index","","",22,null],[11,"index_mut","","",22,null],[11,"shape","","",22,null],[11,"swap","","",22,null],[11,"unsafe_at","","",22,null],[11,"unsafe_set","","",22,null],[11,"at_fast","","Unsafe read access to a vector element by index.",22,null],[11,"set_fast","","Unsafe write access to a vector element by index.",22,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",22,{"inputs":[{"name":"n"}],"output":{"name":"point6"}}],[11,"dimension","","",22,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","The dimension of this entity.",22,null],[11,"to_vector","","Converts this point to its associated vector.",22,null],[11,"as_vector","","Converts a reference to this point to a reference to its associated vector.",22,null],[11,"to_vector","","",22,null],[11,"as_vector","","",22,null],[11,"set_coords","","",22,null],[11,"sub","","",22,null],[11,"neg","","",22,null],[11,"add","","",22,null],[11,"add_assign","","",22,null],[11,"sub","","",22,null],[11,"sub_assign","","",22,null],[11,"approx_epsilon","","",22,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",22,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",22,null],[11,"approx_eq_eps","","",22,null],[11,"approx_eq_ulps","","",22,null],[11,"from_iter","","",22,{"inputs":[{"name":"i"}],"output":{"name":"point6"}}],[11,"max_value","","",22,{"inputs":[],"output":{"name":"point6"}}],[11,"min_value","","",22,{"inputs":[],"output":{"name":"point6"}}],[11,"axpy","","",22,null],[11,"iter","","",22,null],[11,"iter_mut","","",22,null],[11,"rand","","",22,{"inputs":[{"name":"r"}],"output":{"name":"point6"}}],[11,"fmt","","",22,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"encode","","",23,null],[11,"decode","","",23,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",23,null],[11,"hash","","",23,null],[11,"fmt","","",23,null],[11,"new","","Creates a new quaternion from its components.",23,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"quaternion"}}],[11,"vector","","The vector part `(i, j, k)` of this quaternion.",23,null],[11,"scalar","","The scalar part `w` of this quaternion.",23,null],[11,"conjugate","","Compute the conjugate of this quaternion.",23,null],[11,"conjugate_mut","","Replaces this quaternion by its conjugate.",23,null],[11,"inverse","","",23,null],[11,"inverse_mut","","",23,null],[11,"norm_squared","","",23,null],[11,"normalize","","",23,null],[11,"normalize_mut","","",23,null],[11,"mul","","",23,null],[11,"mul_assign","","",23,null],[11,"div","","",23,null],[11,"div_assign","","",23,null],[11,"fmt","","",23,null],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"quaternion"}}],[11,"eq","","",38,null],[11,"ne","","",38,null],[11,"encode","","",38,null],[11,"decode","","",38,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",38,null],[11,"hash","","",38,null],[11,"fmt","","",38,null],[11,"new","","Creates a new unit quaternion from the axis-angle representation of a rotation.",38,{"inputs":[{"name":"vector3"}],"output":{"name":"unitquaternion"}}],[11,"new_with_quaternion","","Creates a new unit quaternion from a quaternion.",38,{"inputs":[{"name":"quaternion"}],"output":{"name":"unitquaternion"}}],[11,"new_with_euler_angles","","Creates a new unit quaternion from Euler angles.",38,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"unitquaternion"}}],[11,"to_rotation_matrix","","Builds a rotation matrix from this quaternion.",38,null],[11,"new_with_unit_quaternion","","Creates a new unit quaternion from a quaternion.",38,{"inputs":[{"name":"quaternion"}],"output":{"name":"unitquaternion"}}],[11,"quaternion","","The `Quaternion` representation of this unit quaternion.",38,null],[11,"one","","",38,{"inputs":[],"output":{"name":"unitquaternion"}}],[11,"inverse","","",38,null],[11,"inverse_mut","","",38,null],[11,"rand","","",38,{"inputs":[{"name":"r"}],"output":{"name":"unitquaternion"}}],[11,"approx_epsilon","","",38,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",38,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",38,null],[11,"approx_eq_ulps","","",38,null],[11,"div","","",38,null],[11,"div_assign","","",38,null],[11,"mul","","",38,null],[11,"mul_assign","","",38,null],[11,"mul","","",38,null],[11,"mul","","",38,null],[11,"mul","","",13,null],[11,"mul","","",19,null],[11,"mul_assign","","",13,null],[11,"mul_assign","","",19,null],[11,"rotation","","",38,null],[11,"inverse_rotation","","",38,null],[11,"append_rotation_mut","","",38,null],[11,"append_rotation","","",38,null],[11,"prepend_rotation_mut","","",38,null],[11,"prepend_rotation","","",38,null],[11,"set_rotation","","",38,null],[11,"to_rotation_matrix","","",38,null],[11,"rotate","","",38,null],[11,"inverse_rotate","","",38,null],[11,"rotate","","",38,null],[11,"inverse_rotate","","",38,null],[11,"angle_to","","",38,null],[11,"rotation_to","","",38,null],[11,"transform","","",38,null],[11,"inverse_transform","","",38,null],[11,"transform","","",38,null],[11,"inverse_transform","","",38,null],[11,"fmt","","",38,null],[11,"inf","","",23,null],[11,"sup","","",23,null],[11,"partial_cmp","","",23,null],[11,"partial_lt","","",23,null],[11,"partial_le","","",23,null],[11,"partial_gt","","",23,null],[11,"partial_ge","","",23,null],[11,"w","","Create a unit vector with its `$compN` component equal to 1.0.",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"i","","Create a unit vector with its `$compN` component equal to 1.0.",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"j","","Create a unit vector with its `$compN` component equal to 1.0.",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"k","","Create a unit vector with its `$compN` component equal to 1.0.",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"from","","",23,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"as_ref","","",23,null],[11,"as_mut","","",23,null],[11,"from","","",23,null],[11,"index","","",23,null],[11,"index_mut","","",23,null],[11,"shape","","",23,null],[11,"swap","","",23,null],[11,"unsafe_at","","",23,null],[11,"unsafe_set","","",23,null],[11,"at_fast","","Unsafe read access to a vector element by index.",23,null],[11,"set_fast","","Unsafe write access to a vector element by index.",23,null],[11,"repeat","","Creates a new vector with all its components equal to a given value.",23,{"inputs":[{"name":"n"}],"output":{"name":"quaternion"}}],[11,"dimension","","",23,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"len","","The dimension of this entity.",23,null],[11,"add","","",23,null],[11,"add_assign","","",23,null],[11,"sub","","",23,null],[11,"sub_assign","","",23,null],[11,"add","","",23,null],[11,"add_assign","","",23,null],[11,"sub","","",23,null],[11,"sub_assign","","",23,null],[11,"mul","","",23,null],[11,"mul_assign","","",23,null],[11,"div","","",23,null],[11,"div_assign","","",23,null],[11,"neg","","",23,null],[11,"one","","",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"zero","","",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"is_zero","","",23,null],[11,"approx_epsilon","","",23,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",23,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",23,null],[11,"approx_eq_eps","","",23,null],[11,"approx_eq_ulps","","",23,null],[11,"from_iter","","",23,{"inputs":[{"name":"i"}],"output":{"name":"quaternion"}}],[11,"max_value","","",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"min_value","","",23,{"inputs":[],"output":{"name":"quaternion"}}],[11,"axpy","","",23,null],[11,"iter","","",23,null],[11,"iter_mut","","",23,null],[11,"dimension","","",38,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"eq","","",39,null],[11,"encode","","",39,null],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",39,null],[11,"fmt","","",39,null],[11,"new","","Creates a new identity matrix.",39,{"inputs":[],"output":{"name":"identity"}}],[11,"fmt","","",39,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"encode","","",5,null],[11,"decode","","",5,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",5,null],[11,"hash","","",5,null],[11,"fmt","","",5,null],[11,"new_identity","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"matrix1"}}],[11,"new","","",5,{"inputs":[{"name":"n"}],"output":{"name":"matrix1"}}],[11,"repeat","","",5,{"inputs":[{"name":"n"}],"output":{"name":"matrix1"}}],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"from","","",5,null],[11,"from","","",5,{"inputs":[{"name":"matrix1"}],"output":{"name":"matrix1"}}],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"add","","",5,null],[11,"add_assign","","",5,null],[11,"sub","","",5,null],[11,"sub_assign","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"div","","",5,null],[11,"div_assign","","",5,null],[11,"abs","","",5,{"inputs":[{"name":"matrix1"}],"output":{"name":"matrix1"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"matrix1"}}],[11,"is_zero","","",5,null],[11,"one","","",5,{"inputs":[],"output":{"name":"matrix1"}}],[11,"iter","","",5,null],[11,"iter_mut","","",5,null],[11,"at_fast","","",5,null],[11,"set_fast","","",5,null],[11,"dimension","","",5,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",5,null],[11,"swap","","",5,null],[11,"unsafe_at","","",5,null],[11,"unsafe_set","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"mul","","",5,null],[11,"mul_assign","","",5,null],[11,"mul","","",5,null],[11,"mul","","",11,null],[11,"mul_assign","","",11,null],[11,"mul","","",5,null],[11,"mul","","",17,null],[11,"mul_assign","","",17,null],[11,"transpose","","",5,null],[11,"transpose_mut","","",5,null],[11,"approx_epsilon","","",5,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",5,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",5,null],[11,"approx_eq_ulps","","",5,null],[11,"nrows","","",5,null],[11,"set_row","","",5,null],[11,"row","","",5,null],[11,"ncols","","",5,null],[11,"set_column","","",5,null],[11,"column","","",5,null],[11,"column_slice","","",5,null],[11,"row_slice","","",5,null],[11,"from_diagonal","","",5,{"inputs":[{"name":"vector1"}],"output":{"name":"matrix1"}}],[11,"diagonal","","",5,null],[11,"to_homogeneous","","",5,null],[11,"from","","",5,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix1"}}],[11,"outer","","",11,null],[11,"eigen_qr","","",5,null],[11,"rand","","",5,{"inputs":[{"name":"r"}],"output":{"name":"matrix1"}}],[11,"mean","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"encode","","",6,null],[11,"decode","","",6,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",6,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"new_identity","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"matrix2"}}],[11,"new","","",6,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix2"}}],[11,"repeat","","",6,{"inputs":[{"name":"n"}],"output":{"name":"matrix2"}}],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,null],[11,"from","","",6,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"add","","",6,null],[11,"add_assign","","",6,null],[11,"sub","","",6,null],[11,"sub_assign","","",6,null],[11,"add","","",6,null],[11,"add_assign","","",6,null],[11,"sub","","",6,null],[11,"sub_assign","","",6,null],[11,"mul","","",6,null],[11,"mul_assign","","",6,null],[11,"div","","",6,null],[11,"div_assign","","",6,null],[11,"abs","","",6,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"matrix2"}}],[11,"is_zero","","",6,null],[11,"one","","",6,{"inputs":[],"output":{"name":"matrix2"}}],[11,"iter","","",6,null],[11,"iter_mut","","",6,null],[11,"dimension","","",6,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",6,null],[11,"swap","","",6,null],[11,"unsafe_at","","",6,null],[11,"unsafe_set","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"at_fast","","",6,null],[11,"set_fast","","",6,null],[11,"transpose","","",6,null],[11,"transpose_mut","","",6,null],[11,"approx_epsilon","","",6,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",6,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",6,null],[11,"approx_eq_ulps","","",6,null],[11,"nrows","","",6,null],[11,"set_row","","",6,null],[11,"row","","",6,null],[11,"ncols","","",6,null],[11,"set_column","","",6,null],[11,"column","","",6,null],[11,"column_slice","","",6,null],[11,"row_slice","","",6,null],[11,"from_diagonal","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"diagonal","","",6,null],[11,"to_homogeneous","","",6,null],[11,"from","","",6,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix2"}}],[11,"outer","","",12,null],[11,"eigen_qr","","",6,null],[11,"rand","","",6,{"inputs":[{"name":"r"}],"output":{"name":"matrix2"}}],[11,"mean","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"encode","","",7,null],[11,"decode","","",7,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",7,null],[11,"hash","","",7,null],[11,"fmt","","",7,null],[11,"new_identity","","",7,{"inputs":[{"name":"usize"}],"output":{"name":"matrix3"}}],[11,"new","","",7,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix3"}}],[11,"repeat","","",7,{"inputs":[{"name":"n"}],"output":{"name":"matrix3"}}],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"add","","",7,null],[11,"add_assign","","",7,null],[11,"sub","","",7,null],[11,"sub_assign","","",7,null],[11,"add","","",7,null],[11,"add_assign","","",7,null],[11,"sub","","",7,null],[11,"sub_assign","","",7,null],[11,"mul","","",7,null],[11,"mul_assign","","",7,null],[11,"div","","",7,null],[11,"div_assign","","",7,null],[11,"abs","","",7,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"matrix3"}}],[11,"is_zero","","",7,null],[11,"one","","",7,{"inputs":[],"output":{"name":"matrix3"}}],[11,"iter","","",7,null],[11,"iter_mut","","",7,null],[11,"dimension","","",7,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",7,null],[11,"swap","","",7,null],[11,"unsafe_at","","",7,null],[11,"unsafe_set","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"at_fast","","",7,null],[11,"set_fast","","",7,null],[11,"transpose","","",7,null],[11,"transpose_mut","","",7,null],[11,"approx_epsilon","","",7,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",7,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",7,null],[11,"approx_eq_ulps","","",7,null],[11,"column_slice","","",7,null],[11,"row_slice","","",7,null],[11,"from_diagonal","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"diagonal","","",7,null],[11,"to_homogeneous","","",7,null],[11,"from","","",7,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix3"}}],[11,"outer","","",13,null],[11,"eigen_qr","","",7,null],[11,"rand","","",7,{"inputs":[{"name":"r"}],"output":{"name":"matrix3"}}],[11,"mean","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"encode","","",8,null],[11,"decode","","",8,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",8,null],[11,"hash","","",8,null],[11,"fmt","","",8,null],[11,"new_identity","","",8,{"inputs":[{"name":"usize"}],"output":{"name":"matrix4"}}],[11,"new","","",8,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix4"}}],[11,"repeat","","",8,{"inputs":[{"name":"n"}],"output":{"name":"matrix4"}}],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"from","","",8,null],[11,"from","","",8,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"add","","",8,null],[11,"add_assign","","",8,null],[11,"sub","","",8,null],[11,"sub_assign","","",8,null],[11,"add","","",8,null],[11,"add_assign","","",8,null],[11,"sub","","",8,null],[11,"sub_assign","","",8,null],[11,"mul","","",8,null],[11,"mul_assign","","",8,null],[11,"div","","",8,null],[11,"div_assign","","",8,null],[11,"abs","","",8,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"zero","","",8,{"inputs":[],"output":{"name":"matrix4"}}],[11,"is_zero","","",8,null],[11,"one","","",8,{"inputs":[],"output":{"name":"matrix4"}}],[11,"iter","","",8,null],[11,"iter_mut","","",8,null],[11,"dimension","","",8,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",8,null],[11,"swap","","",8,null],[11,"unsafe_at","","",8,null],[11,"unsafe_set","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"at_fast","","",8,null],[11,"set_fast","","",8,null],[11,"mul","","",8,null],[11,"mul_assign","","",8,null],[11,"mul","","",8,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"mul","","",8,null],[11,"mul","","",20,null],[11,"mul_assign","","",20,null],[11,"inverse","","",8,null],[11,"inverse_mut","","",8,null],[11,"transpose","","",8,null],[11,"transpose_mut","","",8,null],[11,"approx_epsilon","","",8,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",8,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",8,null],[11,"approx_eq_ulps","","",8,null],[11,"nrows","","",8,null],[11,"set_row","","",8,null],[11,"row","","",8,null],[11,"ncols","","",8,null],[11,"set_column","","",8,null],[11,"column","","",8,null],[11,"column_slice","","",8,null],[11,"row_slice","","",8,null],[11,"from_diagonal","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"matrix4"}}],[11,"diagonal","","",8,null],[11,"to_homogeneous","","",8,null],[11,"from","","",8,{"inputs":[{"name":"matrix5"}],"output":{"name":"matrix4"}}],[11,"outer","","",14,null],[11,"eigen_qr","","",8,null],[11,"rand","","",8,{"inputs":[{"name":"r"}],"output":{"name":"matrix4"}}],[11,"mean","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"encode","","",9,null],[11,"decode","","",9,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",9,null],[11,"hash","","",9,null],[11,"fmt","","",9,null],[11,"new_identity","","",9,{"inputs":[{"name":"usize"}],"output":{"name":"matrix5"}}],[11,"new","","",9,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix5"}}],[11,"repeat","","",9,{"inputs":[{"name":"n"}],"output":{"name":"matrix5"}}],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"from","","",9,null],[11,"from","","",9,{"inputs":[{"name":"matrix5"}],"output":{"name":"matrix5"}}],[11,"abs","","",9,{"inputs":[{"name":"matrix5"}],"output":{"name":"matrix5"}}],[11,"zero","","",9,{"inputs":[],"output":{"name":"matrix5"}}],[11,"is_zero","","",9,null],[11,"one","","",9,{"inputs":[],"output":{"name":"matrix5"}}],[11,"add","","",9,null],[11,"add_assign","","",9,null],[11,"sub","","",9,null],[11,"sub_assign","","",9,null],[11,"add","","",9,null],[11,"add_assign","","",9,null],[11,"sub","","",9,null],[11,"sub_assign","","",9,null],[11,"mul","","",9,null],[11,"mul_assign","","",9,null],[11,"div","","",9,null],[11,"div_assign","","",9,null],[11,"iter","","",9,null],[11,"iter_mut","","",9,null],[11,"dimension","","",9,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",9,null],[11,"swap","","",9,null],[11,"unsafe_at","","",9,null],[11,"unsafe_set","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"at_fast","","",9,null],[11,"set_fast","","",9,null],[11,"mul","","",9,null],[11,"mul_assign","","",9,null],[11,"mul","","",9,null],[11,"mul","","",15,null],[11,"mul_assign","","",15,null],[11,"mul","","",9,null],[11,"mul","","",21,null],[11,"mul_assign","","",21,null],[11,"inverse","","",9,null],[11,"inverse_mut","","",9,null],[11,"transpose","","",9,null],[11,"transpose_mut","","",9,null],[11,"approx_epsilon","","",9,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",9,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",9,null],[11,"approx_eq_ulps","","",9,null],[11,"nrows","","",9,null],[11,"set_row","","",9,null],[11,"row","","",9,null],[11,"ncols","","",9,null],[11,"set_column","","",9,null],[11,"column","","",9,null],[11,"column_slice","","",9,null],[11,"row_slice","","",9,null],[11,"from_diagonal","","",9,{"inputs":[{"name":"vector5"}],"output":{"name":"matrix5"}}],[11,"diagonal","","",9,null],[11,"to_homogeneous","","",9,null],[11,"from","","",9,{"inputs":[{"name":"matrix6"}],"output":{"name":"matrix5"}}],[11,"outer","","",15,null],[11,"eigen_qr","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"matrix5"}}],[11,"mean","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"encode","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",10,null],[11,"hash","","",10,null],[11,"fmt","","",10,null],[11,"new_identity","","",10,{"inputs":[{"name":"usize"}],"output":{"name":"matrix6"}}],[11,"new","","",10,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"matrix6"}}],[11,"repeat","","",10,{"inputs":[{"name":"n"}],"output":{"name":"matrix6"}}],[11,"as_ref","","",10,null],[11,"as_mut","","",10,null],[11,"from","","",10,null],[11,"from","","",10,{"inputs":[{"name":"matrix6"}],"output":{"name":"matrix6"}}],[11,"add","","",10,null],[11,"add_assign","","",10,null],[11,"sub","","",10,null],[11,"sub_assign","","",10,null],[11,"add","","",10,null],[11,"add_assign","","",10,null],[11,"sub","","",10,null],[11,"sub_assign","","",10,null],[11,"mul","","",10,null],[11,"mul_assign","","",10,null],[11,"div","","",10,null],[11,"div_assign","","",10,null],[11,"abs","","",10,{"inputs":[{"name":"matrix6"}],"output":{"name":"matrix6"}}],[11,"zero","","",10,{"inputs":[],"output":{"name":"matrix6"}}],[11,"is_zero","","",10,null],[11,"one","","",10,{"inputs":[],"output":{"name":"matrix6"}}],[11,"iter","","",10,null],[11,"iter_mut","","",10,null],[11,"dimension","","",10,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"shape","","",10,null],[11,"swap","","",10,null],[11,"unsafe_at","","",10,null],[11,"unsafe_set","","",10,null],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"at_fast","","",10,null],[11,"set_fast","","",10,null],[11,"mul","","",10,null],[11,"mul_assign","","",10,null],[11,"mul","","",10,null],[11,"mul","","",16,null],[11,"mul_assign","","",16,null],[11,"mul","","",10,null],[11,"mul","","",22,null],[11,"mul_assign","","",22,null],[11,"inverse","","",10,null],[11,"inverse_mut","","",10,null],[11,"transpose","","",10,null],[11,"transpose_mut","","",10,null],[11,"approx_epsilon","","",10,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",10,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",10,null],[11,"approx_eq_ulps","","",10,null],[11,"nrows","","",10,null],[11,"set_row","","",10,null],[11,"row","","",10,null],[11,"ncols","","",10,null],[11,"set_column","","",10,null],[11,"column","","",10,null],[11,"column_slice","","",10,null],[11,"row_slice","","",10,null],[11,"from_diagonal","","",10,{"inputs":[{"name":"vector6"}],"output":{"name":"matrix6"}}],[11,"diagonal","","",10,null],[11,"outer","","",16,null],[11,"eigen_qr","","",10,null],[11,"rand","","",10,{"inputs":[{"name":"r"}],"output":{"name":"matrix6"}}],[11,"mean","","",10,null],[11,"fmt","","",10,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"encode","","",40,null],[11,"decode","","",40,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",40,null],[11,"fmt","","",40,null],[11,"hash","","",40,null],[11,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",40,{"inputs":[{"name":"vector1"}],"output":{"name":"rotation2"}}],[11,"rotation","","",40,null],[11,"inverse_rotation","","",40,null],[11,"append_rotation_mut","","",40,null],[11,"append_rotation","","",40,null],[11,"prepend_rotation_mut","","",40,null],[11,"prepend_rotation","","",40,null],[11,"set_rotation","","",40,null],[11,"angle_to","","",40,null],[11,"rotation_to","","",40,null],[11,"rand","","",40,{"inputs":[{"name":"r"}],"output":{"name":"rotation2"}}],[11,"absolute_rotate","","",40,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"encode","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",41,null],[11,"fmt","","",41,null],[11,"hash","","",41,null],[11,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",41,{"inputs":[{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"new_with_matrix","","Builds a rotation matrix from an orthogonal matrix.",41,{"inputs":[{"name":"matrix3"}],"output":{"name":"rotation3"}}],[11,"new_with_euler_angles","","Creates a new rotation from Euler angles.",41,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"rotation3"}}],[11,"new_observer_frame","","Creates a rotation that corresponds to the local frame of an observer standing at the\norigin and looking toward `dir`.",41,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix without translation.",41,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix without translation.",41,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"rotation","","",41,null],[11,"inverse_rotation","","",41,null],[11,"append_rotation_mut","","",41,null],[11,"append_rotation","","",41,null],[11,"prepend_rotation_mut","","",41,null],[11,"prepend_rotation","","",41,null],[11,"set_rotation","","",41,null],[11,"angle_to","","",41,null],[11,"rotation_to","","",41,null],[11,"rand","","",41,{"inputs":[{"name":"r"}],"output":{"name":"rotation3"}}],[11,"absolute_rotate","","",41,null],[11,"submatrix","","This rotation&#39;s underlying matrix.",40,null],[11,"rotate","","",40,null],[11,"inverse_rotate","","",40,null],[11,"rotate","","",40,null],[11,"inverse_rotate","","",40,null],[11,"transform","","",40,null],[11,"inverse_transform","","",40,null],[11,"transform","","",40,null],[11,"inverse_transform","","",40,null],[11,"dimension","","",40,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",40,null],[11,"mul_assign","","",40,null],[11,"mul","","",40,null],[11,"mul","","",12,null],[11,"mul_assign","","",12,null],[11,"mul","","",40,null],[11,"mul","","",18,null],[11,"mul_assign","","",18,null],[11,"one","","",40,{"inputs":[],"output":{"name":"rotation2"}}],[11,"new_identity","","",40,{"inputs":[{"name":"usize"}],"output":{"name":"rotation2"}}],[11,"to_rotation_matrix","","",40,null],[11,"ncols","","",40,null],[11,"column","","",40,null],[11,"set_column","","",40,null],[11,"nrows","","",40,null],[11,"row","","",40,null],[11,"set_row","","",40,null],[11,"index","","",40,null],[11,"abs","","",40,{"inputs":[{"name":"rotation2"}],"output":{"name":"matrix2"}}],[11,"to_homogeneous","","",40,null],[11,"inverse_mut","","",40,null],[11,"inverse","","",40,null],[11,"transpose","","",40,null],[11,"transpose_mut","","",40,null],[11,"approx_epsilon","","",40,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",40,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",40,null],[11,"approx_eq_eps","","",40,null],[11,"approx_eq_ulps","","",40,null],[11,"from_diagonal","","",40,{"inputs":[{"name":"vector2"}],"output":{"name":"rotation2"}}],[11,"diagonal","","",40,null],[11,"fmt","","",40,null],[11,"submatrix","","This rotation&#39;s underlying matrix.",41,null],[11,"rotate","","",41,null],[11,"inverse_rotate","","",41,null],[11,"rotate","","",41,null],[11,"inverse_rotate","","",41,null],[11,"transform","","",41,null],[11,"inverse_transform","","",41,null],[11,"transform","","",41,null],[11,"inverse_transform","","",41,null],[11,"dimension","","",41,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"mul","","",41,null],[11,"mul_assign","","",41,null],[11,"mul","","",41,null],[11,"mul","","",13,null],[11,"mul_assign","","",13,null],[11,"mul","","",41,null],[11,"mul","","",19,null],[11,"mul_assign","","",19,null],[11,"one","","",41,{"inputs":[],"output":{"name":"rotation3"}}],[11,"new_identity","","",41,{"inputs":[{"name":"usize"}],"output":{"name":"rotation3"}}],[11,"to_rotation_matrix","","",41,null],[11,"ncols","","",41,null],[11,"column","","",41,null],[11,"set_column","","",41,null],[11,"nrows","","",41,null],[11,"row","","",41,null],[11,"set_row","","",41,null],[11,"index","","",41,null],[11,"abs","","",41,{"inputs":[{"name":"rotation3"}],"output":{"name":"matrix3"}}],[11,"to_homogeneous","","",41,null],[11,"inverse_mut","","",41,null],[11,"inverse","","",41,null],[11,"transpose","","",41,null],[11,"transpose_mut","","",41,null],[11,"approx_epsilon","","",41,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",41,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq","","",41,null],[11,"approx_eq_eps","","",41,null],[11,"approx_eq_ulps","","",41,null],[11,"from_diagonal","","",41,{"inputs":[{"name":"vector3"}],"output":{"name":"rotation3"}}],[11,"diagonal","","",41,null],[11,"fmt","","",41,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"encode","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"encode","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"new_observer_frame","","Creates an isometry that corresponds to the local frame of an observer standing at the\npoint `eye` and looking toward `target`.",2,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"look_at_rh","","Builds a right-handed look-at view matrix.",2,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"look_at_lh","","Builds a left-handed look-at view matrix.",2,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"new","","Creates a new isometry from an axis-angle rotation, and a vector.",1,{"inputs":[{"name":"vector2"},{"name":"vector1"}],"output":{"name":"isometry2"}}],[11,"new_with_rotation_matrix","","Creates a new isometry from a rotation matrix and a vector.",1,{"inputs":[{"name":"vector2"},{"name":"rotation2"}],"output":{"name":"isometry2"}}],[11,"to_rotation_matrix","","",1,null],[11,"rotation","","",1,null],[11,"inverse_rotation","","",1,null],[11,"append_rotation_mut","","",1,null],[11,"append_rotation","","",1,null],[11,"prepend_rotation_mut","","",1,null],[11,"prepend_rotation","","",1,null],[11,"set_rotation","","",1,null],[11,"dimension","","",1,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",1,{"inputs":[],"output":{"name":"isometry2"}}],[11,"absolute_rotate","","",1,null],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"isometry2"}}],[11,"approx_epsilon","","",1,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",1,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",1,null],[11,"approx_eq_ulps","","",1,null],[11,"to_homogeneous","","",1,null],[11,"inverse_mut","","",1,null],[11,"inverse","","",1,null],[11,"transform","","",1,null],[11,"inverse_transform","","",1,null],[11,"transformation","","",1,null],[11,"inverse_transformation","","",1,null],[11,"append_transformation_mut","","",1,null],[11,"append_transformation","","",1,null],[11,"prepend_transformation_mut","","",1,null],[11,"prepend_transformation","","",1,null],[11,"set_transformation","","",1,null],[11,"rotate","","",1,null],[11,"inverse_rotate","","",1,null],[11,"translation","","",1,null],[11,"inverse_translation","","",1,null],[11,"append_translation_mut","","",1,null],[11,"append_translation","","",1,null],[11,"prepend_translation_mut","","",1,null],[11,"prepend_translation","","",1,null],[11,"set_translation","","",1,null],[11,"translate","","",1,null],[11,"inverse_translate","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"mul","","",1,null],[11,"mul","","",40,null],[11,"mul_assign","","",1,null],[11,"mul","","",1,null],[11,"mul","","",1,null],[11,"fmt","","",1,null],[11,"new","","Creates a new isometry from an axis-angle rotation, and a vector.",2,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"isometry3"}}],[11,"new_with_rotation_matrix","","Creates a new isometry from a rotation matrix and a vector.",2,{"inputs":[{"name":"vector3"},{"name":"rotation3"}],"output":{"name":"isometry3"}}],[11,"to_rotation_matrix","","",2,null],[11,"rotation","","",2,null],[11,"inverse_rotation","","",2,null],[11,"append_rotation_mut","","",2,null],[11,"append_rotation","","",2,null],[11,"prepend_rotation_mut","","",2,null],[11,"prepend_rotation","","",2,null],[11,"set_rotation","","",2,null],[11,"dimension","","",2,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"isometry3"}}],[11,"absolute_rotate","","",2,null],[11,"rand","","",2,{"inputs":[{"name":"r"}],"output":{"name":"isometry3"}}],[11,"approx_epsilon","","",2,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",2,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",2,null],[11,"approx_eq_ulps","","",2,null],[11,"to_homogeneous","","",2,null],[11,"inverse_mut","","",2,null],[11,"inverse","","",2,null],[11,"transform","","",2,null],[11,"inverse_transform","","",2,null],[11,"transformation","","",2,null],[11,"inverse_transformation","","",2,null],[11,"append_transformation_mut","","",2,null],[11,"append_transformation","","",2,null],[11,"prepend_transformation_mut","","",2,null],[11,"prepend_transformation","","",2,null],[11,"set_transformation","","",2,null],[11,"rotate","","",2,null],[11,"inverse_rotate","","",2,null],[11,"translation","","",2,null],[11,"inverse_translation","","",2,null],[11,"append_translation_mut","","",2,null],[11,"append_translation","","",2,null],[11,"prepend_translation_mut","","",2,null],[11,"prepend_translation","","",2,null],[11,"set_translation","","",2,null],[11,"translate","","",2,null],[11,"inverse_translate","","",2,null],[11,"mul","","",2,null],[11,"mul_assign","","",2,null],[11,"mul","","",2,null],[11,"mul","","",41,null],[11,"mul_assign","","",2,null],[11,"mul","","",2,null],[11,"mul","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"encode","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"encode","","",4,null],[11,"decode","","",4,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"new","","Creates a new similarity transformation from a vector, an axis-angle rotation, and a scale factor.",3,{"inputs":[{"name":"vector2"},{"name":"vector1"},{"name":"n"}],"output":{"name":"similarity2"}}],[11,"new_with_rotation_matrix","","Creates a new similarity transformation from a rotation matrix, a vector, and a scale factor.",3,{"inputs":[{"name":"vector2"},{"name":"rotation2"},{"name":"n"}],"output":{"name":"similarity2"}}],[11,"new_with_isometry","","Creates a new similarity transformation from an isometry and a scale factor.",3,{"inputs":[{"name":"isometry2"},{"name":"n"}],"output":{"name":"similarity2"}}],[11,"dimension","","",3,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"scale","","The scale factor of this similarity transformation.",3,null],[11,"inverse_scale","","The inverse scale factor of this similarity transformation.",3,null],[11,"append_scale_mut","","Appends in-place a scale to this similarity transformation.",3,null],[11,"append_scale","","Appends a scale to this similarity transformation.",3,null],[11,"prepend_scale_mut","","Prepends in-place a scale to this similarity transformation.",3,null],[11,"prepend_scale","","Prepends a scale to this similarity transformation.",3,null],[11,"set_scale","","Sets the scale of this similarity transformation.",3,null],[11,"one","","",3,{"inputs":[],"output":{"name":"similarity2"}}],[11,"mul","","",3,null],[11,"mul_assign","","",3,null],[11,"mul","","",3,null],[11,"mul_assign","","",3,null],[11,"mul","","",1,null],[11,"mul","","",3,null],[11,"mul_assign","","",3,null],[11,"mul","","",40,null],[11,"mul","","",3,null],[11,"mul","","",3,null],[11,"transformation","","",3,null],[11,"inverse_transformation","","",3,null],[11,"append_transformation_mut","","",3,null],[11,"append_transformation","","",3,null],[11,"prepend_transformation_mut","","",3,null],[11,"prepend_transformation","","",3,null],[11,"set_transformation","","",3,null],[11,"transform","","",3,null],[11,"inverse_transform","","",3,null],[11,"inverse_mut","","",3,null],[11,"inverse","","",3,null],[11,"to_homogeneous","","",3,null],[11,"approx_epsilon","","",3,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",3,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",3,null],[11,"approx_eq_ulps","","",3,null],[11,"rand","","",3,{"inputs":[{"name":"r"}],"output":{"name":"similarity2"}}],[11,"fmt","","",3,null],[11,"new","","Creates a new similarity transformation from a vector, an axis-angle rotation, and a scale factor.",4,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"n"}],"output":{"name":"similarity3"}}],[11,"new_with_rotation_matrix","","Creates a new similarity transformation from a rotation matrix, a vector, and a scale factor.",4,{"inputs":[{"name":"vector3"},{"name":"rotation3"},{"name":"n"}],"output":{"name":"similarity3"}}],[11,"new_with_isometry","","Creates a new similarity transformation from an isometry and a scale factor.",4,{"inputs":[{"name":"isometry3"},{"name":"n"}],"output":{"name":"similarity3"}}],[11,"dimension","","",4,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[11,"scale","","The scale factor of this similarity transformation.",4,null],[11,"inverse_scale","","The inverse scale factor of this similarity transformation.",4,null],[11,"append_scale_mut","","Appends in-place a scale to this similarity transformation.",4,null],[11,"append_scale","","Appends a scale to this similarity transformation.",4,null],[11,"prepend_scale_mut","","Prepends in-place a scale to this similarity transformation.",4,null],[11,"prepend_scale","","Prepends a scale to this similarity transformation.",4,null],[11,"set_scale","","Sets the scale of this similarity transformation.",4,null],[11,"one","","",4,{"inputs":[],"output":{"name":"similarity3"}}],[11,"mul","","",4,null],[11,"mul_assign","","",4,null],[11,"mul","","",4,null],[11,"mul_assign","","",4,null],[11,"mul","","",2,null],[11,"mul","","",4,null],[11,"mul_assign","","",4,null],[11,"mul","","",41,null],[11,"mul","","",4,null],[11,"mul","","",4,null],[11,"transformation","","",4,null],[11,"inverse_transformation","","",4,null],[11,"append_transformation_mut","","",4,null],[11,"append_transformation","","",4,null],[11,"prepend_transformation_mut","","",4,null],[11,"prepend_transformation","","",4,null],[11,"set_transformation","","",4,null],[11,"transform","","",4,null],[11,"inverse_transform","","",4,null],[11,"inverse_mut","","",4,null],[11,"inverse","","",4,null],[11,"to_homogeneous","","",4,null],[11,"approx_epsilon","","",4,{"inputs":[{"name":"option"}],"output":{"name":"n"}}],[11,"approx_ulps","","",4,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[11,"approx_eq_eps","","",4,null],[11,"approx_eq_ulps","","",4,null],[11,"rand","","",4,{"inputs":[{"name":"r"}],"output":{"name":"similarity3"}}],[11,"fmt","","",4,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"encode","","",42,null],[11,"decode","","",42,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"encode","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",43,null],[11,"fmt","","",43,null],[11,"new","","Creates a new 3D perspective projection.",42,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"perspective3"}}],[11,"to_matrix","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",42,null],[11,"to_perspective_matrix","","Build a `PerspectiveMatrix3` representing this projection.",42,null],[11,"aspect","","Gets the `width / height` aspect ratio.",42,null],[11,"fovy","","Gets the y field of view of the view frustrum.",42,null],[11,"znear","","Gets the near plane offset of the view frustrum.",42,null],[11,"zfar","","Gets the far plane offset of the view frustrum.",42,null],[11,"set_aspect","","Sets the `width / height` aspect ratio of the view frustrum.",42,null],[11,"set_fovy","","Sets the y field of view of the view frustrum.",42,null],[11,"set_znear","","Sets the near plane offset of the view frustrum.",42,null],[11,"set_zfar","","Sets the far plane offset of the view frustrum.",42,null],[11,"project_point","","Projects a point.",42,null],[11,"project_vector","","Projects a vector.",42,null],[11,"new","","Creates a new perspective matrix from the aspect ratio, y field of view, and near/far planes.",43,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"perspectivematrix3"}}],[11,"new_with_matrix","","Creates a new perspective projection matrix from a 4D matrix.",43,{"inputs":[{"name":"matrix4"}],"output":{"name":"perspectivematrix3"}}],[11,"as_matrix","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",43,null],[11,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",43,null],[11,"fovy","","Gets the y field of view of the view frustrum.",43,null],[11,"znear","","Gets the near plane offset of the view frustrum.",43,null],[11,"zfar","","Gets the far plane offset of the view frustrum.",43,null],[11,"set_aspect","","Updates this projection matrix with a new `width / height` aspect ratio of the view\nfrustrum.",43,null],[11,"set_fovy","","Updates this projection with a new y field of view of the view frustrum.",43,null],[11,"set_znear","","Updates this projection matrix with a new near plane offset of the view frustrum.",43,null],[11,"set_zfar","","Updates this projection matrix with a new far plane offset of the view frustrum.",43,null],[11,"set_znear_and_zfar","","Updates this projection matrix with new near and far plane offsets of the view frustrum.",43,null],[11,"project_point","","Projects a point.",43,null],[11,"project_vector","","Projects a vector.",43,null],[11,"to_matrix","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",43,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"encode","","",44,null],[11,"decode","","",44,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"encode","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"__dn"}],"output":{"name":"result"}}],[11,"clone","","",45,null],[11,"fmt","","",45,null],[11,"new","","Creates a new 3D orthographic projection.",44,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthographic3"}}],[11,"to_matrix","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",44,null],[11,"to_orthographic_matrix","","Build a `OrthographicMatrix3` representing this projection.",44,null],[11,"left","","The smallest x-coordinate of the view cuboid.",44,null],[11,"right","","The largest x-coordinate of the view cuboid.",44,null],[11,"bottom","","The smallest y-coordinate of the view cuboid.",44,null],[11,"top","","The largest y-coordinate of the view cuboid.",44,null],[11,"znear","","The near plane offset of the view cuboid.",44,null],[11,"zfar","","The far plane offset of the view cuboid.",44,null],[11,"set_left","","Sets the smallest x-coordinate of the view cuboid.",44,null],[11,"set_right","","Sets the largest x-coordinate of the view cuboid.",44,null],[11,"set_bottom","","Sets the smallest y-coordinate of the view cuboid.",44,null],[11,"set_top","","Sets the largest y-coordinate of the view cuboid.",44,null],[11,"set_znear","","Sets the near plane offset of the view cuboid.",44,null],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",44,null],[11,"project_point","","Projects a point.",44,null],[11,"project_vector","","Projects a vector.",44,null],[11,"new","","Creates a new orthographic projection matrix.",45,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthographicmatrix3"}}],[11,"new_with_fov","","Creates a new orthographic projection matrix from an aspect ratio and the vertical field of view.",45,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"orthographicmatrix3"}}],[11,"new_with_matrix","","Creates a new orthographic matrix from a 4D matrix.",45,{"inputs":[{"name":"matrix4"}],"output":{"name":"orthographicmatrix3"}}],[11,"as_matrix","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",45,null],[11,"left","","The smallest x-coordinate of the view cuboid.",45,null],[11,"right","","The largest x-coordinate of the view cuboid.",45,null],[11,"bottom","","The smallest y-coordinate of the view cuboid.",45,null],[11,"top","","The largest y-coordinate of the view cuboid.",45,null],[11,"znear","","The near plane offset of the view cuboid.",45,null],[11,"zfar","","The far plane offset of the view cuboid.",45,null],[11,"set_left","","Sets the smallest x-coordinate of the view cuboid.",45,null],[11,"set_right","","Sets the largest x-coordinate of the view cuboid.",45,null],[11,"set_bottom","","Sets the smallest y-coordinate of the view cuboid.",45,null],[11,"set_top","","Sets the largest y-coordinate of the view cuboid.",45,null],[11,"set_znear","","Sets the near plane offset of the view cuboid.",45,null],[11,"set_zfar","","Sets the far plane offset of the view cuboid.",45,null],[11,"set_left_and_right","","Sets the view cuboid coordinates along the `x` axis.",45,null],[11,"set_bottom_and_top","","Sets the view cuboid coordinates along the `y` axis.",45,null],[11,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",45,null],[11,"project_point","","Projects a point.",45,null],[11,"project_vector","","Projects a vector.",45,null],[11,"to_matrix","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",45,null],[11,"one","","",39,{"inputs":[],"output":{"name":"identity"}}],[11,"inverse","","",39,null],[11,"inverse_mut","","",39,null],[11,"mul","","",39,null],[11,"transpose","","",39,null],[11,"transpose_mut","","",39,null],[11,"translate","","",39,null],[11,"inverse_translate","","",39,null],[11,"rotate","","",39,null],[11,"inverse_rotate","","",39,null],[11,"absolute_rotate","","",39,null],[11,"transform","","",39,null],[11,"inverse_transform","","",39,null],[11,"inverse","","",5,null],[11,"inverse_mut","","",5,null],[11,"inverse","","",6,null],[11,"inverse_mut","","",6,null],[11,"inverse","","",7,null],[11,"inverse_mut","","",7,null],[11,"determinant","","",5,null],[11,"determinant","","",6,null],[11,"determinant","","",7,null],[11,"nrows","","",7,null],[11,"row","","",7,null],[11,"set_row","","",7,null],[11,"ncols","","",7,null],[11,"column","","",7,null],[11,"set_column","","",7,null],[11,"mul","","",7,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"mul","","",13,null],[11,"mul","","",12,null],[11,"mul","","",6,null],[11,"mul","","",7,null],[11,"mul","","",19,null],[11,"mul","","",18,null],[11,"mul","","",6,null],[11,"mul_assign","","",7,null],[11,"mul_assign","","",6,null],[11,"mul_assign","","",13,null],[11,"mul_assign","","",12,null],[11,"mul_assign","","",19,null],[11,"mul_assign","","",18,null],[11,"angle_to","","",12,null],[11,"rotation_to","","",12,null],[11,"angle_to","","",13,null],[11,"rotation_to","","",13,null],[11,"cross","","",12,null],[11,"cross_matrix","","",12,null],[11,"cross","","",13,null],[11,"cross_matrix","","",13,null],[11,"nrows","","",12,null],[11,"row","","",12,null],[11,"set_row","","",12,null],[11,"canonical_basis","","",11,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",11,{"inputs":[{"name":"vector1"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"canonical_basis","","",12,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",12,{"inputs":[{"name":"vector2"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",12,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"canonical_basis","","",13,{"inputs":[{"name":"f"}],"output":null}],[11,"orthonormal_subspace_basis","","",13,{"inputs":[{"name":"vector3"},{"name":"f"}],"output":null}],[11,"canonical_basis_element","","",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"sample","","",11,{"inputs":[{"name":"f"}],"output":null}],[11,"sample","","",12,{"inputs":[{"name":"f"}],"output":null}],[11,"sample","","",13,{"inputs":[{"name":"f"}],"output":null}],[11,"sample","","",14,{"inputs":[{"name":"f"}],"output":null}],[11,"eq","","",24,null],[11,"encode","","",24,null],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"is_eq","","Returns `true` if `self` is equal to `Equal`.",24,null],[11,"is_lt","","Returns `true` if `self` is equal to `Less`.",24,null],[11,"is_le","","Returns `true` if `self` is equal to `Less` or `Equal`.",24,null],[11,"is_gt","","Returns `true` if `self` is equal to `Greater`.",24,null],[11,"is_ge","","Returns `true` if `self` is equal to `Greater` or `Equal`.",24,null],[11,"is_not_comparable","","Returns `true` if `self` is equal to `NotComparable`.",24,null],[11,"from_ordering","","Creates a `PartialOrdering` from an `Ordering`.",24,{"inputs":[{"name":"ordering"}],"output":{"name":"partialordering"}}],[11,"to_ordering","","Converts this `PartialOrdering` to an `Ordering`.",24,null],[8,"Absolute","","Trait of objects having an absolute value.\nThis is useful if the object does not have the same type as its absolute value.",null,null],[10,"abs","","Computes some absolute value of this object.\nTypically, this will make all component of a matrix or vector positive.",46,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[8,"AbsoluteRotate","","Composition of a rotation and an absolute value.",null,null],[10,"absolute_rotate","","This is the same as:",47,null],[8,"ApproxEq","","Trait for testing approximate equality",null,null],[10,"approx_epsilon","","Default epsilon for approximation.",48,{"inputs":[{"name":"option"}],"output":{"name":"eps"}}],[10,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",48,null],[10,"approx_ulps","","Default ULPs for approximation.",48,{"inputs":[{"name":"option"}],"output":{"name":"u32"}}],[10,"approx_eq_ulps","","Tests approximate equality using units in the last place (ULPs)",48,null],[11,"approx_eq","","Tests approximate equality.",48,null],[8,"Axpy","","Trait of objects implementing the `y = ax + y` operation.",null,null],[10,"axpy","","Adds $$a * x$$ to `self`.",49,null],[8,"Basis","","Traits of objects which can form a basis (typically vectors).",null,null],[10,"canonical_basis","","Iterates through the canonical basis of the space in which this object lives.",50,{"inputs":[{"name":"f"}],"output":null}],[10,"orthonormal_subspace_basis","","Iterates through a basis of the subspace orthogonal to `self`.",50,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"canonical_basis_element","","Gets the ith element of the canonical basis.",50,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[8,"BaseFloat","","Basic floating-point number numeric trait.",null,null],[10,"pi","","Archimedes&#39; constant.",51,{"inputs":[],"output":{"name":"self"}}],[10,"two_pi","","2.0 * pi.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_2","","pi / 2.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_3","","pi / 3.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_4","","pi / 4.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_6","","pi / 6.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_pi_8","","pi / 8.0.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_1_pi","","1.0 / pi.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_pi","","2.0 / pi.",51,{"inputs":[],"output":{"name":"self"}}],[10,"frac_2_sqrt_pi","","2.0 / sqrt(pi).",51,{"inputs":[],"output":{"name":"self"}}],[10,"e","","Euler&#39;s number.",51,{"inputs":[],"output":{"name":"self"}}],[10,"log2_e","","log2(e).",51,{"inputs":[],"output":{"name":"self"}}],[10,"log10_e","","log10(e).",51,{"inputs":[],"output":{"name":"self"}}],[10,"ln_2","","ln(2.0).",51,{"inputs":[],"output":{"name":"self"}}],[10,"ln_10","","ln(10.0).",51,{"inputs":[],"output":{"name":"self"}}],[8,"BaseNum","","Basic integral numeric trait.",null,null],[8,"Bounded","","Types that have maximum and minimum value.",null,null],[10,"min_value","","The minimum value.",52,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","The maximum value.",52,{"inputs":[],"output":{"name":"self"}}],[8,"Cast","","Traits of objects which can be created from an object of type `T`.",null,null],[10,"from","","Converts an element of type `T` to an element of type `Self`.",53,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Column","","Trait to access columns of a matrix or vector.",null,null],[10,"ncols","","The number of column of this matrix or vector.",54,null],[10,"column","","Reads the `i`-th column of `self`.",54,null],[10,"set_column","","Writes the `i`-th column of `self`.",54,null],[8,"ColumnSlice","","Trait to access part of a column of a matrix",null,null],[10,"column_slice","","Returns a view to a slice of a column of a matrix.",55,null],[8,"RowSlice","","Trait to access part of a row of a matrix",null,null],[10,"row_slice","","Returns a view to a slice of a row of a matrix.",56,null],[8,"Covariance","","Trait for computing the covariance of a set of data.",null,null],[10,"covariance","","Computes the covariance of the obsevations stored by `m`:",57,null],[11,"covariance_to","","Computes the covariance of the obsevations stored by `m`:",57,null],[8,"Cross","","Trait of elements having a cross product.",null,null],[16,"CrossProductType","","The cross product output.",58,null],[10,"cross","","Computes the cross product between two elements (usually vectors).",58,null],[8,"CrossMatrix","","Trait of elements having a cross product operation which can be expressed as a matrix.",null,null],[10,"cross_matrix","","The matrix associated to any cross product with this vector. I.e. `v.cross(anything)` =\n`v.cross_matrix().rmul(anything)`.",59,null],[8,"Determinant","","Trait of objects having a determinant. Typically used by square matrices.",null,null],[10,"determinant","","Returns the determinant of `m`.",60,null],[8,"Diagonal","","Trait to get the diagonal of square matrices.",null,null],[10,"from_diagonal","","Creates a new matrix with the given diagonal.",61,{"inputs":[{"name":"v"}],"output":{"name":"self"}}],[10,"diagonal","","The diagonal of this matrix.",61,null],[8,"Dimension","","Trait of objects having a spacial dimension known at compile time.",null,null],[10,"dimension","","The dimension of the object.",62,{"inputs":[{"name":"option"}],"output":{"name":"usize"}}],[8,"Dot","","Traits of objects having a dot product.",null,null],[10,"dot","","Computes the dot (inner) product of two vectors.",63,null],[8,"EigenQR","","Trait for computing the eigenvector and eigenvalues of a square matrix usin the QR algorithm.",null,null],[10,"eigen_qr","","Computes the eigenvectors and eigenvalues of this matrix.",64,null],[8,"Eye","","Trait for constructing the identity matrix",null,null],[10,"new_identity","","Return the identity matrix of specified dimension",65,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[8,"FloatPoint","","Trait of points with components implementing the `BaseFloat` trait.",null,null],[11,"distance_squared","","Computes the square distance between two points.",66,null],[11,"distance","","Computes the distance between two points.",66,null],[8,"FloatVector","","Trait of vector with components implementing the `BaseFloat` trait.",null,null],[8,"FromHomogeneous","","Traits of objects which can be build from an homogeneous coordinate form.",null,null],[10,"from","","Builds an object from its homogeneous coordinate form.",67,{"inputs":[{"name":"u"}],"output":{"name":"self"}}],[8,"Indexable","","This is a workaround of current Rust limitations.",null,null],[10,"swap","","Swaps the `i`-th element of `self` with its `j`-th element.",68,null],[10,"unsafe_at","","Reads the `i`-th element of `self`.",68,null],[10,"unsafe_set","","Writes to the `i`-th element of `self`.",68,null],[8,"Inverse","","Trait of objects having an inverse. Typically used to implement matrix inverse.",null,null],[10,"inverse","","Returns the inverse of `m`.",69,null],[10,"inverse_mut","","In-place version of `inverse`.",69,null],[8,"Iterable","","This is a workaround of current Rust limitations.",null,null],[10,"iter","","Gets a vector-like read-only iterator.",70,null],[8,"IterableMut","","This is a workaround of current Rust limitations.",null,null],[10,"iter_mut","","Gets a vector-like read-write iterator.",71,null],[8,"Matrix","","Trait of matrices.",null,null],[8,"Mean","","Trait for computing the mean of a set of data.",null,null],[10,"mean","","Computes the mean of the observations stored by `v`.",72,null],[8,"Norm","","Traits of objects having an euclidian norm.",null,null],[11,"norm","","Computes the norm of `self`.",73,null],[10,"norm_squared","","Computes the squared norm of `self`.",73,null],[10,"normalize","","Gets the normalized version of a copy of `v`.",73,null],[10,"normalize_mut","","Normalizes `self`.",73,null],[8,"NumPoint","","Trait grouping most common operations on points.",null,null],[8,"NumVector","","Trait grouping most common operations on vectors.",null,null],[8,"Origin","","The zero element of a vector space, seen as an element of its embeding affine space.",null,null],[10,"origin","","The trivial origin.",74,{"inputs":[],"output":{"name":"self"}}],[10,"is_origin","","Returns true if this points is exactly the trivial origin.",74,null],[8,"Outer","","Traits of objects having an outer product.",null,null],[16,"OuterProductType","","Result type of the outer product.",75,null],[10,"outer","","Computes the outer product: `a * b`",75,null],[8,"PartialOrder","","Pointwise ordering operations.",null,null],[10,"inf","","Returns the infimum of this value and another",76,null],[10,"sup","","Returns the supremum of this value and another",76,null],[10,"partial_cmp","","Compare `self` and `other` using a partial ordering relation.",76,null],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",76,null],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",76,null],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",76,null],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",76,null],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",76,null],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",76,null],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",76,null],[8,"PointAsVector","","Trait that relates a point of an affine space to a vector of the associated vector space.",null,null],[16,"Vector","","The vector type of the vector space associated to this point&#39;s affine space.",77,null],[10,"to_vector","","Converts this point to its associated vector.",77,null],[10,"as_vector","","Converts a reference to this point to a reference to its associated vector.",77,null],[10,"set_coords","","Sets the coordinates of this point to match those of a given vector.",77,null],[8,"Repeat","","Trait for constructiong an object repeating a value.",null,null],[10,"repeat","","Returns a value with filled by `val`.",78,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[8,"Rotate","","Trait of objects able to rotate other objects.",null,null],[10,"rotate","","Applies a rotation to `v`.",79,null],[10,"inverse_rotate","","Applies an inverse rotation to `v`.",79,null],[8,"Rotation","","Trait of object which can represent a rotation, and to which new rotations can be appended. A\nrotation is assumed to be an isometry without translation and without reflexion.",null,null],[10,"rotation","","Gets the rotation associated with `self`.",80,null],[10,"inverse_rotation","","Gets the inverse rotation associated with `self`.",80,null],[10,"append_rotation_mut","","Appends a rotation to this object.",80,null],[10,"append_rotation","","Appends the rotation `amount` to a copy of `t`.",80,null],[10,"prepend_rotation_mut","","Prepends a rotation to this object.",80,null],[10,"prepend_rotation","","Prepends the rotation `amount` to a copy of `t`.",80,null],[10,"set_rotation","","Sets the rotation of `self`.",80,null],[8,"RotationMatrix","","Trait of transformation having a rotation extractable as a rotation matrix. This can typically\nbe implemented by quaternions to convert them to a rotation matrix.",null,null],[16,"Output","","The output rotation matrix type.",81,null],[10,"to_rotation_matrix","","Gets the rotation matrix represented by `self`.",81,null],[8,"RotationWithTranslation","","Various composition of rotation and translation.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",82,null],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",82,null],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",82,null],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",82,null],[8,"RotationTo","","Trait of object that can be rotated to be superimposed with another one of the same nature.",null,null],[16,"AngleType","","Type of the angle between two elements.",83,null],[16,"DeltaRotationType","","Type of the rotation between two elements.",83,null],[10,"angle_to","","Computes an angle nedded to transform the first element to the second one using a\nrotation.",83,null],[10,"rotation_to","","Computes the smallest rotation needed to transform the first element to the second one.",83,null],[8,"Row","","Trait to access rows of a matrix or a vector.",null,null],[10,"nrows","","The number of column of `self`.",84,null],[10,"row","","Reads the `i`-th row of `self`.",84,null],[10,"set_row","","Writes the `i`-th row of `self`.",84,null],[8,"Shape","","The shape of an indexable object.",null,null],[10,"shape","","Returns the shape of an indexable object.",85,null],[8,"SquareMatrix","","Trait implemented by square matrices.",null,null],[8,"ToHomogeneous","","Traits of objects which can be put in homogeneous coordinates form.",null,null],[10,"to_homogeneous","","Gets the homogeneous coordinates form of this object.",86,null],[8,"Transform","","Trait of objects able to transform other objects.",null,null],[10,"transform","","Applies a transformation to `v`.",87,null],[10,"inverse_transform","","Applies an inverse transformation to `v`.",87,null],[8,"Transformation","","Trait of object which represent a transformation, and to which new transformations can\nbe appended.",null,null],[10,"transformation","","Gets the transformation of `self`.",88,null],[10,"inverse_transformation","","Gets the inverse transformation of `self`.",88,null],[10,"append_transformation_mut","","Appends a transformation to this object.",88,null],[10,"append_transformation","","Appends the transformation `amount` to a copy of `t`.",88,null],[10,"prepend_transformation_mut","","Prepends a transformation to this object.",88,null],[10,"prepend_transformation","","Prepends the transformation `amount` to a copy of `t`.",88,null],[10,"set_transformation","","Sets the transformation of `self`.",88,null],[8,"Translate","","Trait of objects able to translate other objects. This is typically\nimplemented by vectors to translate points.",null,null],[10,"translate","","Apply a translation to an object.",89,null],[10,"inverse_translate","","Apply an inverse translation to an object.",89,null],[8,"Translation","","Trait of object which represent a translation, and to wich new translation\ncan be appended.",null,null],[10,"translation","","Gets the translation associated with this object.",90,null],[10,"inverse_translation","","Gets the inverse translation associated with this object.",90,null],[10,"append_translation_mut","","Appends a translation to this object.",90,null],[10,"append_translation","","Appends the translation `amount` to a copy of `t`.",90,null],[10,"prepend_translation_mut","","Prepends a translation to this object.",90,null],[10,"prepend_translation","","Prepends the translation `amount` to a copy of `t`.",90,null],[10,"set_translation","","Sets the translation.",90,null],[8,"Transpose","","Trait of objects which can be transposed.",null,null],[10,"transpose","","Computes the transpose of a matrix.",91,null],[10,"transpose_mut","","In-place version of `transposed`.",91,null],[8,"UniformSphereSample","","Trait of vectors able to sample a unit sphere.",null,null],[10,"sample","","Iterate through the samples.",92,{"inputs":[{"name":"f"}],"output":null}],[14,"assert_approx_eq_eps","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait.",null,null],[14,"assert_approx_eq_ulps","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait, with tolerance specified in ULPs.",null,null],[14,"assert_approx_eq","","Asserts approximate equality of two values with the `ApproxEq` trait.",null,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",82,null],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",82,null],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",82,null],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",82,null],[11,"norm","","Computes the norm of `self`.",73,null],[11,"distance_squared","","Computes the square distance between two points.",66,null],[11,"distance","","Computes the distance between two points.",66,null],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",76,null],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",76,null],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",76,null],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",76,null],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",76,null],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",76,null],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",76,null],[11,"approx_eq","","Tests approximate equality.",48,null],[11,"covariance_to","","Computes the covariance of the obsevations stored by `m`:",57,null],[11,"norm","","Computes the norm of `self`.",73,null],[11,"append_rotation_wrt_point","","Applies a rotation centered on a specific point.",82,null],[11,"append_rotation_wrt_point_mut","","Rotates `self` using a specific center of rotation.",82,null],[11,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",82,null],[11,"append_rotation_wrt_center_mut","","Applies a rotation centered on the translation of `m`.",82,null],[11,"distance_squared","","Computes the square distance between two points.",66,null],[11,"distance","","Computes the distance between two points.",66,null],[11,"approx_eq","","Tests approximate equality.",48,null],[11,"covariance_to","","Computes the covariance of the obsevations stored by `m`:",57,null],[11,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self &lt;= other`.",76,null],[11,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self &lt; other`.",76,null],[11,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self &gt;= other`.",76,null],[11,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self &gt; other`.",76,null],[11,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",76,null],[11,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",76,null],[11,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",76,null]],"paths":[[3,"DVector"],[3,"Isometry2"],[3,"Isometry3"],[3,"Similarity2"],[3,"Similarity3"],[3,"Matrix1"],[3,"Matrix2"],[3,"Matrix3"],[3,"Matrix4"],[3,"Matrix5"],[3,"Matrix6"],[3,"Vector1"],[3,"Vector2"],[3,"Vector3"],[3,"Vector4"],[3,"Vector5"],[3,"Vector6"],[3,"Point1"],[3,"Point2"],[3,"Point3"],[3,"Point4"],[3,"Point5"],[3,"Point6"],[3,"Quaternion"],[4,"PartialOrdering"],[3,"DMatrix"],[3,"DMatrix1"],[3,"DVector1"],[3,"DMatrix2"],[3,"DVector2"],[3,"DMatrix3"],[3,"DVector3"],[3,"DMatrix4"],[3,"DVector4"],[3,"DMatrix5"],[3,"DVector5"],[3,"DMatrix6"],[3,"DVector6"],[3,"UnitQuaternion"],[3,"Identity"],[3,"Rotation2"],[3,"Rotation3"],[3,"Perspective3"],[3,"PerspectiveMatrix3"],[3,"Orthographic3"],[3,"OrthographicMatrix3"],[8,"Absolute"],[8,"AbsoluteRotate"],[8,"ApproxEq"],[8,"Axpy"],[8,"Basis"],[8,"BaseFloat"],[8,"Bounded"],[8,"Cast"],[8,"Column"],[8,"ColumnSlice"],[8,"RowSlice"],[8,"Covariance"],[8,"Cross"],[8,"CrossMatrix"],[8,"Determinant"],[8,"Diagonal"],[8,"Dimension"],[8,"Dot"],[8,"EigenQR"],[8,"Eye"],[8,"FloatPoint"],[8,"FromHomogeneous"],[8,"Indexable"],[8,"Inverse"],[8,"Iterable"],[8,"IterableMut"],[8,"Mean"],[8,"Norm"],[8,"Origin"],[8,"Outer"],[8,"PartialOrder"],[8,"PointAsVector"],[8,"Repeat"],[8,"Rotate"],[8,"Rotation"],[8,"RotationMatrix"],[8,"RotationWithTranslation"],[8,"RotationTo"],[8,"Row"],[8,"Shape"],[8,"ToHomogeneous"],[8,"Transform"],[8,"Transformation"],[8,"Translate"],[8,"Translation"],[8,"Transpose"],[8,"UniformSphereSample"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,null],[10,"mod_floor","","Floored integer modulo, satisfying:",1,null],[10,"gcd","","Greatest Common Divisor (GCD).",1,null],[10,"lcm","","Lowest Common Multiple (LCM).",1,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,null],[10,"is_even","","Returns `true` if the number is even.",1,null],[10,"is_odd","","Returns `true` if the number is odd.",1,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,null],[10,"abs_sub","","The positive difference of two numbers.",5,null],[10,"signum","","Returns the sign of the number.",5,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",7,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",7,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",8,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",9,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",10,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",11,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",12,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",12,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",12,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",12,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",12,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",12,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",12,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",12,null],[10,"swap_bytes","","Reverses the byte order of the integer.",12,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",12,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",12,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",13,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",13,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",13,null],[10,"floor","","Returns the largest integer less than or equal to a number.",13,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",13,null],[10,"trunc","","Return the integer part of a number.",13,null],[10,"fract","","Returns the fractional part of a number.",13,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",13,null],[10,"signum","","Returns a number that represents the sign of `self`.",13,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",13,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",13,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",13,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,null],[10,"powi","","Raise a number to an integer power.",13,null],[10,"powf","","Raise a number to a floating point power.",13,null],[10,"sqrt","","Take the square root of a number.",13,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,null],[10,"exp2","","Returns `2^(self)`.",13,null],[10,"ln","","Returns the natural logarithm of the number.",13,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,null],[10,"log2","","Returns the base 2 logarithm of the number.",13,null],[10,"log10","","Returns the base 10 logarithm of the number.",13,null],[10,"max","","Returns the maximum of the two numbers.",13,null],[10,"min","","Returns the minimum of the two numbers.",13,null],[10,"abs_sub","","The positive difference of two numbers.",13,null],[10,"cbrt","","Take the cubic root of a number.",13,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",13,null],[10,"sin","","Computes the sine of a number (in radians).",13,null],[10,"cos","","Computes the cosine of a number (in radians).",13,null],[10,"tan","","Computes the tangent of a number (in radians).",13,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",13,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",13,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",13,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",13,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",13,null],[10,"sinh","","Hyperbolic sine function.",13,null],[10,"cosh","","Hyperbolic cosine function.",13,null],[10,"tanh","","Hyperbolic tangent function.",13,null],[10,"asinh","","Inverse hyperbolic sine function.",13,null],[10,"acosh","","Inverse hyperbolic cosine function.",13,null],[10,"atanh","","Inverse hyperbolic tangent function.",13,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[0,"big_digit","","",null,null],[17,"BITS","num::bigint::big_digit","",null,null],[17,"BASE","","",null,null],[5,"from_doublebigdigit","","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u64"}}],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",17,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",18,null],[13,"NoSign","","",18,null],[13,"Plus","","",18,null],[3,"BigInt","","A big signed integer type.",null,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",19,null],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",20,null],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",20,null],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",20,null],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",20,null],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",20,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",21,null],[13,"Other","","",21,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",1,null],[10,"mod_floor","","Floored integer modulo, satisfying:",1,null],[10,"gcd","","Greatest Common Divisor (GCD).",1,null],[10,"lcm","","Lowest Common Multiple (LCM).",1,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,null],[10,"is_even","","Returns `true` if the number is even.",1,null],[10,"is_odd","","Returns `true` if the number is odd.",1,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,null],[10,"abs_sub","","The positive difference of two numbers.",5,null],[10,"signum","","Returns the sign of the number.",5,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num::traits","",null,null],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",7,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",7,null],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",8,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",9,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",10,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",11,null],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[0,"float","num::traits","",null,null],[8,"Float","num::traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",13,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",13,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",13,null],[10,"floor","","Returns the largest integer less than or equal to a number.",13,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",13,null],[10,"trunc","","Return the integer part of a number.",13,null],[10,"fract","","Returns the fractional part of a number.",13,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",13,null],[10,"signum","","Returns a number that represents the sign of `self`.",13,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",13,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",13,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",13,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,null],[10,"powi","","Raise a number to an integer power.",13,null],[10,"powf","","Raise a number to a floating point power.",13,null],[10,"sqrt","","Take the square root of a number.",13,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,null],[10,"exp2","","Returns `2^(self)`.",13,null],[10,"ln","","Returns the natural logarithm of the number.",13,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,null],[10,"log2","","Returns the base 2 logarithm of the number.",13,null],[10,"log10","","Returns the base 10 logarithm of the number.",13,null],[10,"max","","Returns the maximum of the two numbers.",13,null],[10,"min","","Returns the minimum of the two numbers.",13,null],[10,"abs_sub","","The positive difference of two numbers.",13,null],[10,"cbrt","","Take the cubic root of a number.",13,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",13,null],[10,"sin","","Computes the sine of a number (in radians).",13,null],[10,"cos","","Computes the cosine of a number (in radians).",13,null],[10,"tan","","Computes the tangent of a number (in radians).",13,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",13,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",13,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",13,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",13,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",13,null],[10,"sinh","","Hyperbolic sine function.",13,null],[10,"cosh","","Hyperbolic cosine function.",13,null],[10,"tanh","","Hyperbolic tangent function.",13,null],[10,"asinh","","Inverse hyperbolic sine function.",13,null],[10,"acosh","","Inverse hyperbolic cosine function.",13,null],[10,"atanh","","Inverse hyperbolic tangent function.",13,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",13,null],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",12,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",12,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",12,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",12,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",12,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",12,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",12,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",12,null],[10,"swap_bytes","","Reverses the byte order of the integer.",12,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",12,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",12,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,null],[8,"Num","num::traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",22,null],[13,"Invalid","","",22,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",23,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",11,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",13,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",13,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",13,null],[10,"floor","","Returns the largest integer less than or equal to a number.",13,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",13,null],[10,"trunc","","Return the integer part of a number.",13,null],[10,"fract","","Returns the fractional part of a number.",13,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",13,null],[10,"signum","","Returns a number that represents the sign of `self`.",13,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",13,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",13,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",13,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,null],[10,"powi","","Raise a number to an integer power.",13,null],[10,"powf","","Raise a number to a floating point power.",13,null],[10,"sqrt","","Take the square root of a number.",13,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,null],[10,"exp2","","Returns `2^(self)`.",13,null],[10,"ln","","Returns the natural logarithm of the number.",13,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,null],[10,"log2","","Returns the base 2 logarithm of the number.",13,null],[10,"log10","","Returns the base 10 logarithm of the number.",13,null],[10,"max","","Returns the maximum of the two numbers.",13,null],[10,"min","","Returns the minimum of the two numbers.",13,null],[10,"abs_sub","","The positive difference of two numbers.",13,null],[10,"cbrt","","Take the cubic root of a number.",13,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",13,null],[10,"sin","","Computes the sine of a number (in radians).",13,null],[10,"cos","","Computes the cosine of a number (in radians).",13,null],[10,"tan","","Computes the tangent of a number (in radians).",13,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",13,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",13,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",13,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",13,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",13,null],[10,"sinh","","Hyperbolic sine function.",13,null],[10,"cosh","","Hyperbolic cosine function.",13,null],[10,"tanh","","Hyperbolic tangent function.",13,null],[10,"asinh","","Inverse hyperbolic sine function.",13,null],[10,"acosh","","Inverse hyperbolic cosine function.",13,null],[10,"atanh","","Inverse hyperbolic tangent function.",13,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",8,null],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,null],[10,"abs_sub","","The positive difference of two numbers.",5,null],[10,"signum","","Returns the sign of the number.",5,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",12,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",12,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",12,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",12,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",12,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",12,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",12,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",12,null],[10,"swap_bytes","","Reverses the byte order of the integer.",12,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",12,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",12,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",9,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",10,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",7,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",7,null],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"ParseRatioError","","",null,null],[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[11,"new","num::bigint","Creates and initializes a BigInt.",24,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",24,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",24,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",24,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",24,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",24,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",24,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",24,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",24,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",24,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",24,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",24,null],[11,"checked_add","","",24,null],[11,"checked_sub","","",24,null],[11,"checked_mul","","",24,null],[11,"checked_div","","",24,null],[11,"description","num::rational","",25,null],[11,"mul","","",26,null],[11,"mul","","",26,null],[11,"sub","","",26,null],[11,"sub","","",26,null],[11,"abs","","",26,null],[11,"abs_sub","","",26,null],[11,"signum","","",26,null],[11,"is_positive","","",26,null],[11,"is_negative","","",26,null],[11,"cmp","","",26,null],[11,"one","","",26,{"inputs":[],"output":{"name":"ratio"}}],[11,"div","","",26,null],[11,"div","","",26,null],[11,"zero","","",26,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",26,null],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",26,null],[11,"fmt","","",25,null],[11,"decode","","",26,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"neg","","",26,null],[11,"add","","",26,null],[11,"add","","",26,null],[11,"eq","","",26,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"encode","","",26,null],[11,"partial_cmp","","",26,null],[11,"rem","","",26,null],[11,"rem","","",26,null],[11,"from_str","","Parses `numer/denom` or just `numer`.",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",26,null],[11,"fmt","","",25,null],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",26,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"clone","","",26,null],[11,"clone","","",25,null],[11,"mul","num::complex","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"encode","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"clone","","",0,null],[11,"to_bigint","num::bigint","",24,null],[11,"to_bigint","","",27,null],[11,"checked_add","","",27,null],[11,"checked_add","","",24,null],[11,"sub","","",27,null],[11,"sub","","",24,null],[11,"sub","","",24,null],[11,"sub","","",27,null],[11,"from_str_radix","","Creates and initializes a `BigUint`.",27,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",24,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",27,null],[11,"fmt","","",24,null],[11,"to_i64","","",27,null],[11,"to_u64","","",27,null],[11,"to_f32","","",27,null],[11,"to_f64","","",27,null],[11,"to_i64","","",24,null],[11,"to_u64","","",24,null],[11,"to_f32","","",24,null],[11,"to_f64","","",24,null],[11,"div","","",27,null],[11,"div","","",27,null],[11,"div","","",24,null],[11,"div","","",24,null],[11,"div_rem","","",27,null],[11,"div_floor","","",27,null],[11,"mod_floor","","",27,null],[11,"div_mod_floor","","",27,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",27,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",27,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",27,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",27,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",27,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",27,null],[11,"div_rem","","",24,null],[11,"div_floor","","",24,null],[11,"mod_floor","","",24,null],[11,"div_mod_floor","","",24,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",24,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",24,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",24,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",24,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",24,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",24,null],[11,"shl","","",27,null],[11,"shl","","",24,null],[11,"checked_div","","",27,null],[11,"checked_div","","",24,null],[11,"neg","","",27,null],[11,"neg","","Negate Sign value.",18,null],[11,"neg","","",24,null],[11,"eq","","",27,null],[11,"eq","","",24,null],[11,"eq","","",18,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"bitand","","",27,null],[11,"bitand","","",27,null],[11,"to_biguint","","",24,null],[11,"to_biguint","","",27,null],[11,"fmt","","",27,null],[11,"fmt","","",18,null],[11,"fmt","","",24,null],[11,"fmt","","",21,null],[11,"from","","",27,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",24,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",24,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",24,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",21,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[11,"from","","",27,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",27,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",27,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",27,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",24,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",24,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",24,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",24,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",24,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",24,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",24,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",27,null],[11,"shr","","",24,null],[11,"checked_mul","","",27,null],[11,"checked_mul","","",24,null],[11,"fmt","","",27,null],[11,"fmt","","",24,null],[11,"clone","","",27,null],[11,"clone","","",18,null],[11,"clone","","",24,null],[11,"bitor","","",27,null],[11,"bitor","","",27,null],[11,"description","","",21,null],[11,"mul","","",18,null],[11,"mul","","",27,null],[11,"mul","","",27,null],[11,"mul","","",24,null],[11,"mul","","",24,null],[11,"abs","","",24,null],[11,"abs_sub","","",24,null],[11,"signum","","",24,null],[11,"is_positive","","",24,null],[11,"is_negative","","",24,null],[11,"one","","",27,{"inputs":[],"output":{"name":"biguint"}}],[11,"one","","",24,{"inputs":[],"output":{"name":"bigint"}}],[11,"cmp","","",27,null],[11,"cmp","","",24,null],[11,"cmp","","",18,null],[11,"zero","","",27,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",27,null],[11,"zero","","",24,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",24,null],[11,"fmt","","",27,null],[11,"fmt","","",24,null],[11,"fmt","","",21,null],[11,"default","","",27,{"inputs":[],"output":{"name":"biguint"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"bigint"}}],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[11,"hash","","",18,null],[11,"hash","","",24,null],[11,"from_i64","","",27,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",27,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",27,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",24,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",24,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",24,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"add","","",27,null],[11,"add","","",24,null],[11,"add","","",24,null],[11,"add","","",27,null],[11,"fmt","","",27,null],[11,"fmt","","",24,null],[11,"partial_cmp","","",27,null],[11,"partial_cmp","","",24,null],[11,"partial_cmp","","",18,null],[11,"encode","","",27,null],[11,"encode","","",18,null],[11,"encode","","",24,null],[11,"rem","","",27,null],[11,"rem","","",27,null],[11,"rem","","",24,null],[11,"rem","","",24,null],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"checked_sub","","",27,null],[11,"checked_sub","","",24,null],[11,"bitxor","","",27,null],[11,"bitxor","","",27,null],[11,"fmt","","",27,null],[11,"fmt","","",24,null],[11,"fmt","num::traits","",22,null],[11,"fmt","","",23,null],[11,"next_back","num::iter","",28,null],[11,"next_back","","",29,null],[11,"next","","",28,null],[11,"size_hint","","",28,null],[11,"next","","",29,null],[11,"size_hint","","",29,null],[11,"next","","",30,null],[11,"next","","",31,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"new","num::bigint","Creates and initializes a `BigUint`.",27,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",27,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",27,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",27,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",27,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",27,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",27,null],[11,"parse_bytes","","Creates and initializes a `BigUint`.",27,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",27,null],[11,"new","num::complex","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,null],[11,"scale","","Multiplies `self` by the scalar `t`.",0,null],[11,"unscale","","Divides `self` by the scalar `t`.",0,null],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,null],[11,"inv","","Returns `1/self`",0,null],[11,"norm","","Calculate |self|",0,null],[11,"arg","","Calculate the principal Arg of self.",0,null],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,null],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,null],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,null],[11,"sin","","Computes the sine of `self`.",0,null],[11,"cos","","Computes the cosine of `self`.",0,null],[11,"tan","","Computes the tangent of `self`.",0,null],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,null],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,null],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,null],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,null],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,null],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,null],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,null],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,null],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,null],[11,"is_nan","","Checks if the given complex number is NaN",0,null],[11,"is_infinite","","Checks if the given complex number is infinite",0,null],[11,"is_finite","","Checks if the given complex number is finite",0,null],[11,"is_normal","","Checks if the given complex number is normal",0,null],[11,"from_integer","num::rational","Creates a ratio representing the integer `t`.",26,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",26,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",26,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",26,null],[11,"numer","","Gets an immutable reference to the numerator.",26,null],[11,"denom","","Gets an immutable reference to the denominator.",26,null],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",26,null],[11,"reduced","","Returns a `reduce`d copy of self.",26,null],[11,"recip","","Returns the reciprocal.",26,null],[11,"floor","","Rounds towards minus infinity.",26,null],[11,"ceil","","Rounds towards plus infinity.",26,null],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",26,null],[11,"trunc","","Rounds towards zero.",26,null],[11,"fract","","Returns the fractional part of a number.",26,null],[11,"pow","","Raises the ratio to the power of an exponent",26,null],[11,"from_float","","Converts a float into a rational number.",26,{"inputs":[{"name":"t"}],"output":{"name":"option"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"ToBigUint"],[4,"Sign"],[8,"ToBigInt"],[8,"RandBigInt"],[4,"ParseBigIntError"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"BigInt"],[3,"ParseRatioError"],[3,"Ratio"],[3,"BigUint"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"encode","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"clone","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"from_integer","","Creates a ratio representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",0,null],[11,"numer","","Gets an immutable reference to the numerator.",0,null],[11,"denom","","Gets an immutable reference to the denominator.",0,null],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,null],[11,"reduced","","Returns a `reduce`d copy of self.",0,null],[11,"recip","","Returns the reciprocal.",0,null],[11,"floor","","Rounds towards minus infinity.",0,null],[11,"ceil","","Rounds towards plus infinity.",0,null],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,null],[11,"trunc","","Rounds towards zero.",0,null],[11,"fract","","Returns the fractional part of a number.",0,null],[11,"pow","","Raises the ratio to the power of an exponent",0,null],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"eq","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"rem","","",0,null],[11,"rem","","",0,null],[11,"neg","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,null],[11,"abs_sub","","",0,null],[11,"signum","","",0,null],[11,"is_positive","","",0,null],[11,"is_negative","","",0,null],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,null],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,null],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,null],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,null],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,null],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,null],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,null],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,null],[11,"encode","","",5,null],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"hash","","",5,null],[11,"eq","","",5,null],[11,"partial_cmp","","",5,null],[11,"cmp","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,null],[11,"bitand","","",5,null],[11,"bitor","","",5,null],[11,"bitor","","",5,null],[11,"bitxor","","",5,null],[11,"bitxor","","",5,null],[11,"shl","","",5,null],[11,"shr","","",5,null],[11,"zero","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",5,null],[11,"one","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",5,null],[11,"add","","",5,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"mul","","",5,null],[11,"mul","","",5,null],[11,"div","","",5,null],[11,"div","","",5,null],[11,"rem","","",5,null],[11,"rem","","",5,null],[11,"neg","","",5,null],[11,"checked_add","","",5,null],[11,"checked_sub","","",5,null],[11,"checked_mul","","",5,null],[11,"checked_div","","",5,null],[11,"div_rem","","",5,null],[11,"div_floor","","",5,null],[11,"mod_floor","","",5,null],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,null],[11,"to_i64","","",5,null],[11,"to_u64","","",5,null],[11,"to_f32","","",5,null],[11,"to_f64","","",5,null],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,null],[11,"to_biguint","","",5,null],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,null],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,null],[11,"encode","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"neg","","Negate Sign value.",0,null],[11,"mul","","",0,null],[11,"encode","","",6,null],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"hash","","",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"cmp","","",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,null],[11,"shr","","",6,null],[11,"zero","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",6,null],[11,"one","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",6,null],[11,"abs_sub","","",6,null],[11,"signum","","",6,null],[11,"is_positive","","",6,null],[11,"is_negative","","",6,null],[11,"add","","",6,null],[11,"add","","",6,null],[11,"sub","","",6,null],[11,"sub","","",6,null],[11,"mul","","",6,null],[11,"mul","","",6,null],[11,"div","","",6,null],[11,"div","","",6,null],[11,"rem","","",6,null],[11,"rem","","",6,null],[11,"neg","","",6,null],[11,"checked_add","","",6,null],[11,"checked_sub","","",6,null],[11,"checked_mul","","",6,null],[11,"checked_div","","",6,null],[11,"div_rem","","",6,null],[11,"div_floor","","",6,null],[11,"mod_floor","","",6,null],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,null],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,null],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,null],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,null],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,null],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,null],[11,"to_i64","","",6,null],[11,"to_u64","","",6,null],[11,"to_f32","","",6,null],[11,"to_f64","","",6,null],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,null],[11,"to_bigint","","",5,null],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`,\nnot including the sign.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",6,null],[11,"checked_add","","",6,null],[11,"checked_sub","","",6,null],[11,"checked_mul","","",6,null],[11,"checked_div","","",6,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"encode","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,null],[11,"scale","","Multiplies `self` by the scalar `t`.",0,null],[11,"unscale","","Divides `self` by the scalar `t`.",0,null],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,null],[11,"inv","","Returns `1/self`",0,null],[11,"norm","","Calculate |self|",0,null],[11,"arg","","Calculate the principal Arg of self.",0,null],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,null],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,null],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,null],[11,"sin","","Computes the sine of `self`.",0,null],[11,"cos","","Computes the cosine of `self`.",0,null],[11,"tan","","Computes the tangent of `self`.",0,null],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,null],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,null],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,null],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,null],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,null],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,null],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,null],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,null],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,null],[11,"is_nan","","Checks if the given complex number is NaN",0,null],[11,"is_infinite","","Checks if the given complex number is infinite",0,null],[11,"is_finite","","Checks if the given complex number is finite",0,null],[11,"is_normal","","Checks if the given complex number is normal",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,null]],"paths":[[3,"Complex"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,null],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,null],[11,"ind_sample","","",4,null],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,null],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,null],[11,"ind_sample","","",5,null],[11,"clone","","",6,null],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,null],[11,"ind_sample","","",6,null],[11,"clone","","",7,null],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,null],[11,"ind_sample","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,null],[11,"ind_sample","","",8,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,null],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,null],[11,"ind_sample","","",10,null],[11,"clone","","",11,null],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,null],[11,"ind_sample","","",11,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,null],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,null],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,null],[11,"ind_sample","","",13,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,null],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,null],[11,"clone","","",16,null],[11,"sample","","",16,null],[11,"ind_sample","","",16,null],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,null],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,null],[11,"ind_sample","","",17,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,null],[11,"next_u32","","",18,null],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,null],[11,"next_u32","","",19,null],[11,"next_u64","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,null],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,null],[11,"next_u32","","",20,null],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,null],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,null],[11,"next_u32","","",21,null],[11,"next_u64","","",21,null],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,null],[11,"reseed","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,null],[11,"next_u64","","",24,null],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,null],[11,"next_u64","","",25,null],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,null],[11,"next_u64","","Return the next random u64.",27,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",27,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",27,null],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",27,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,null],[11,"choose","","Return a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,null],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,null],[11,"next","","",30,null],[11,"clone","","",31,null],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,null],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,null],[11,"next_u64","","",32,null],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,null],[11,"next_u32","","",33,null],[11,"next_u64","","",33,null],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",4,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",5,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"fmt","","",3,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",7,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",8,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"fmt","","",6,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"fmt","","",9,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"fmt","","",12,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",10,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"fmt","","",12,null],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,null],[11,"fmt","","",11,null],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",17,null],[11,"emit_nil","","",17,null],[11,"emit_usize","","",17,null],[11,"emit_u64","","",17,null],[11,"emit_u32","","",17,null],[11,"emit_u16","","",17,null],[11,"emit_u8","","",17,null],[11,"emit_isize","","",17,null],[11,"emit_i64","","",17,null],[11,"emit_i32","","",17,null],[11,"emit_i16","","",17,null],[11,"emit_i8","","",17,null],[11,"emit_bool","","",17,null],[11,"emit_f64","","",17,null],[11,"emit_f32","","",17,null],[11,"emit_char","","",17,null],[11,"emit_str","","",17,null],[11,"emit_enum","","",17,null],[11,"emit_enum_variant","","",17,null],[11,"emit_enum_variant_arg","","",17,null],[11,"emit_enum_struct_variant","","",17,null],[11,"emit_enum_struct_variant_field","","",17,null],[11,"emit_struct","","",17,null],[11,"emit_struct_field","","",17,null],[11,"emit_tuple","","",17,null],[11,"emit_tuple_arg","","",17,null],[11,"emit_tuple_struct","","",17,null],[11,"emit_tuple_struct_arg","","",17,null],[11,"emit_option","","",17,null],[11,"emit_option_none","","",17,null],[11,"emit_option_some","","",17,null],[11,"emit_seq","","",17,null],[11,"emit_seq_elt","","",17,null],[11,"emit_map","","",17,null],[11,"emit_map_elt_key","","",17,null],[11,"emit_map_elt_val","","",17,null],[11,"encode","","",9,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",9,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",9,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",9,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",9,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",9,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",9,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",9,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",9,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",9,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",9,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",9,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,null],[11,"is_empty","","Returns true if the stack is empty.",18,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",18,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,null],[11,"next","","",19,null],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",19,null],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,null],[11,"read_usize","","",21,null],[11,"read_u8","","",21,null],[11,"read_u16","","",21,null],[11,"read_u32","","",21,null],[11,"read_u64","","",21,null],[11,"read_isize","","",21,null],[11,"read_i8","","",21,null],[11,"read_i16","","",21,null],[11,"read_i32","","",21,null],[11,"read_i64","","",21,null],[11,"read_f32","","",21,null],[11,"read_f64","","",21,null],[11,"read_bool","","",21,null],[11,"read_char","","",21,null],[11,"read_str","","",21,null],[11,"read_enum","","",21,null],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,null],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,null],[11,"read_struct","","",21,null],[11,"read_struct_field","","",21,null],[11,"read_tuple","","",21,null],[11,"read_tuple_arg","","",21,null],[11,"read_tuple_struct","","",21,null],[11,"read_tuple_struct_arg","","",21,null],[11,"read_option","","",21,null],[11,"read_seq","","",21,null],[11,"read_seq_elt","","",21,null],[11,"read_map","","",21,null],[11,"read_map_elt_key","","",21,null],[11,"read_map_elt_val","","",21,null],[11,"error","","",21,null],[11,"to_json","","",9,null],[11,"fmt","","Encodes a json value into a string",9,null],[11,"fmt","","Encodes a json value into a string",22,null],[11,"fmt","","Encodes a json value into a string",23,null],[11,"indent","","Set the indentation level for the emitted JSON",24,null],[11,"fmt","","Encodes a json value into a string",24,null],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",25,null],[10,"read_nil","","",25,null],[10,"read_usize","","",25,null],[10,"read_u64","","",25,null],[10,"read_u32","","",25,null],[10,"read_u16","","",25,null],[10,"read_u8","","",25,null],[10,"read_isize","","",25,null],[10,"read_i64","","",25,null],[10,"read_i32","","",25,null],[10,"read_i16","","",25,null],[10,"read_i8","","",25,null],[10,"read_bool","","",25,null],[10,"read_f64","","",25,null],[10,"read_f32","","",25,null],[10,"read_char","","",25,null],[10,"read_str","","",25,null],[10,"read_enum","","",25,null],[10,"read_enum_variant","","",25,null],[10,"read_enum_variant_arg","","",25,null],[10,"read_enum_struct_variant","","",25,null],[10,"read_enum_struct_variant_field","","",25,null],[10,"read_struct","","",25,null],[10,"read_struct_field","","",25,null],[10,"read_tuple","","",25,null],[10,"read_tuple_arg","","",25,null],[10,"read_tuple_struct","","",25,null],[10,"read_tuple_struct_arg","","",25,null],[10,"read_option","","",25,null],[10,"read_seq","","",25,null],[10,"read_seq_elt","","",25,null],[10,"read_map","","",25,null],[10,"read_map_elt_key","","",25,null],[10,"read_map_elt_val","","",25,null],[10,"error","","",25,null],[8,"Encoder","","",null,null],[16,"Error","","",26,null],[10,"emit_nil","","",26,null],[10,"emit_usize","","",26,null],[10,"emit_u64","","",26,null],[10,"emit_u32","","",26,null],[10,"emit_u16","","",26,null],[10,"emit_u8","","",26,null],[10,"emit_isize","","",26,null],[10,"emit_i64","","",26,null],[10,"emit_i32","","",26,null],[10,"emit_i16","","",26,null],[10,"emit_i8","","",26,null],[10,"emit_bool","","",26,null],[10,"emit_f64","","",26,null],[10,"emit_f32","","",26,null],[10,"emit_char","","",26,null],[10,"emit_str","","",26,null],[10,"emit_enum","","",26,null],[10,"emit_enum_variant","","",26,null],[10,"emit_enum_variant_arg","","",26,null],[10,"emit_enum_struct_variant","","",26,null],[10,"emit_enum_struct_variant_field","","",26,null],[10,"emit_struct","","",26,null],[10,"emit_struct_field","","",26,null],[10,"emit_tuple","","",26,null],[10,"emit_tuple_arg","","",26,null],[10,"emit_tuple_struct","","",26,null],[10,"emit_tuple_struct_arg","","",26,null],[10,"emit_option","","",26,null],[10,"emit_option_none","","",26,null],[10,"emit_option_some","","",26,null],[10,"emit_seq","","",26,null],[10,"emit_seq_elt","","",26,null],[10,"emit_map","","",26,null],[10,"emit_map_elt_key","","",26,null],[10,"emit_map_elt_val","","",26,null],[8,"Decodable","","",null,null],[10,"decode","","",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",28,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",29,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"lconv","","",null,null],[12,"decimal_point","","",26,null],[12,"thousands_sep","","",26,null],[12,"grouping","","",26,null],[12,"int_curr_symbol","","",26,null],[12,"currency_symbol","","",26,null],[12,"mon_decimal_point","","",26,null],[12,"mon_thousands_sep","","",26,null],[12,"mon_grouping","","",26,null],[12,"positive_sign","","",26,null],[12,"negative_sign","","",26,null],[12,"int_frac_digits","","",26,null],[12,"frac_digits","","",26,null],[12,"p_cs_precedes","","",26,null],[12,"p_sep_by_space","","",26,null],[12,"n_cs_precedes","","",26,null],[12,"n_sep_by_space","","",26,null],[12,"p_sign_posn","","",26,null],[12,"n_sign_posn","","",26,null],[12,"int_p_cs_precedes","","",26,null],[12,"int_p_sep_by_space","","",26,null],[12,"int_n_cs_precedes","","",26,null],[12,"int_n_sep_by_space","","",26,null],[12,"int_p_sign_posn","","",26,null],[12,"int_n_sign_posn","","",26,null],[3,"dirent","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"dirent64","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",29,null],[12,"rlim_max","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_pathv","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",31,null],[12,"ifa_name","","",31,null],[12,"ifa_flags","","",31,null],[12,"ifa_addr","","",31,null],[12,"ifa_netmask","","",31,null],[12,"ifa_ifu","","",31,null],[12,"ifa_data","","",31,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",32,null],[12,"pw_passwd","","",32,null],[12,"pw_uid","","",32,null],[12,"pw_gid","","",32,null],[12,"pw_gecos","","",32,null],[12,"pw_dir","","",32,null],[12,"pw_shell","","",32,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",33,null],[12,"f_frsize","","",33,null],[12,"f_blocks","","",33,null],[12,"f_bfree","","",33,null],[12,"f_bavail","","",33,null],[12,"f_files","","",33,null],[12,"f_ffree","","",33,null],[12,"f_favail","","",33,null],[12,"f_fsid","","",33,null],[12,"f_flag","","",33,null],[12,"f_namemax","","",33,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",34,null],[12,"dqb_bsoftlimit","","",34,null],[12,"dqb_curspace","","",34,null],[12,"dqb_ihardlimit","","",34,null],[12,"dqb_isoftlimit","","",34,null],[12,"dqb_curinodes","","",34,null],[12,"dqb_btime","","",34,null],[12,"dqb_itime","","",34,null],[12,"dqb_valid","","",34,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",35,null],[12,"ssi_errno","","",35,null],[12,"ssi_code","","",35,null],[12,"ssi_pid","","",35,null],[12,"ssi_uid","","",35,null],[12,"ssi_fd","","",35,null],[12,"ssi_tid","","",35,null],[12,"ssi_band","","",35,null],[12,"ssi_overrun","","",35,null],[12,"ssi_trapno","","",35,null],[12,"ssi_status","","",35,null],[12,"ssi_int","","",35,null],[12,"ssi_ptr","","",35,null],[12,"ssi_utime","","",35,null],[12,"ssi_stime","","",35,null],[12,"ssi_addr","","",35,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",36,null],[12,"mq_maxmsg","","",36,null],[12,"mq_msgsize","","",36,null],[12,"mq_curmsgs","","",36,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_flags","","",38,null],[12,"ss_size","","",38,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",39,null],[12,"si_errno","","",39,null],[12,"si_code","","",39,null],[12,"_pad","","",39,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"ucred","","",null,null],[12,"pid","","",41,null],[12,"uid","","",41,null],[12,"gid","","",41,null],[3,"statfs","","",null,null],[12,"f_type","","",42,null],[12,"f_bsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_namelen","","",42,null],[12,"f_frsize","","",42,null],[3,"msghdr","","",null,null],[12,"msg_name","","",43,null],[12,"msg_namelen","","",43,null],[12,"msg_iov","","",43,null],[12,"msg_iovlen","","",43,null],[12,"msg_control","","",43,null],[12,"msg_controllen","","",43,null],[12,"msg_flags","","",43,null],[3,"termios","","",null,null],[12,"c_iflag","","",44,null],[12,"c_oflag","","",44,null],[12,"c_cflag","","",44,null],[12,"c_lflag","","",44,null],[12,"c_line","","",44,null],[12,"c_cc","","",44,null],[12,"c_ispeed","","",44,null],[12,"c_ospeed","","",44,null],[3,"flock","","",null,null],[12,"l_type","","",45,null],[12,"l_whence","","",45,null],[12,"l_start","","",45,null],[12,"l_len","","",45,null],[12,"l_pid","","",45,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",48,null],[12,"st_ino","","",48,null],[12,"st_nlink","","",48,null],[12,"st_mode","","",48,null],[12,"st_uid","","",48,null],[12,"st_gid","","",48,null],[12,"st_rdev","","",48,null],[12,"st_size","","",48,null],[12,"st_blksize","","",48,null],[12,"st_blocks","","",48,null],[12,"st_atime","","",48,null],[12,"st_atime_nsec","","",48,null],[12,"st_mtime","","",48,null],[12,"st_mtime_nsec","","",48,null],[12,"st_ctime","","",48,null],[12,"st_ctime_nsec","","",48,null],[3,"stat64","","",null,null],[12,"st_dev","","",49,null],[12,"st_ino","","",49,null],[12,"st_nlink","","",49,null],[12,"st_mode","","",49,null],[12,"st_uid","","",49,null],[12,"st_gid","","",49,null],[12,"st_rdev","","",49,null],[12,"st_size","","",49,null],[12,"st_blksize","","",49,null],[12,"st_blocks","","",49,null],[12,"st_atime","","",49,null],[12,"st_atime_nsec","","",49,null],[12,"st_mtime","","",49,null],[12,"st_mtime_nsec","","",49,null],[12,"st_ctime","","",49,null],[12,"st_ctime_nsec","","",49,null],[3,"pthread_attr_t","","",null,null],[3,"mcontext_t","","",null,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",50,null],[12,"uc_link","","",50,null],[12,"uc_stack","","",50,null],[12,"uc_mcontext","","",50,null],[12,"uc_sigmask","","",50,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",50,null],[11,"clone","","",53,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",58,null],[11,"clone","","",36,null],[11,"clone","","",59,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",60,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"ucontext_t"],[3,"pthread_attr_t"],[3,"mcontext_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"clone","","",1,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"clone","","",3,null],[11,"next","","",3,null]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,null],[10,"swap_bytes","","Reverses the byte order of the integer.",15,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,null],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
initSearch(searchIndex);
